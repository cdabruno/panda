Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/satellite19.sas.
- State has 23 bits divided into 23 mutex groups.
- Domain contains 104 actions.
- Domain contains 128 tasks.
- Domain contains 260 methods.
- The initial state contains 4 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 128
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
- Starting state heuristic value: 27
Search Results
- Search time 0.007 seconds
- Visited list time 0.000296 seconds
- Visited list inserts 88
- Visited list pruned 2
- Visited list contains 86
- Visited list hash collisions 2
- Visited list used hash buckets 86
- Generated 1067 search nodes
  Calculated heuristic for 915 nodes
  One modifications 142
  Effectless actions 10
- including 142 one modification actions
- including 0 one modification methods
- and       10 progressions of effectless actions
- Generated 130714 nodes per second
- Final fringe contains 268 nodes
- Status: Solved
- Found solution of length 25
- Total costs of actions: 13
==>
1036 switch_on[instrument1,satellite0]
1040 turn_to[satellite0,star1,star6]
1041 calibrate[satellite0,instrument1,star1]
1042 turn_to[satellite0,star5,star1]
1043 take_image[satellite0,star5,instrument1,spectrograph0]
1044 turn_to[satellite0,planet2,star5]
1049 take_image[satellite0,planet2,instrument1,spectrograph0]
1050 turn_to[satellite0,planet3,planet2]
1054 take_image[satellite0,planet3,instrument1,spectrograph0]
1055 turn_to[satellite0,star4,planet3]
1059 take_image[satellite0,star4,instrument1,spectrograph0]
1060 turn_to[satellite0,star6,star4]
1064 take_image[satellite0,star6,instrument1,thermograph1]
root 0
1063 method1_splitted_1[satellite0,star6,thermograph1] -> _splitting_method_method1_splitted_1 1064
1058 method1_splitted_1[satellite0,star4,spectrograph0] -> _splitting_method_method1_splitted_1 1059
1053 method1_splitted_1[satellite0,planet3,spectrograph0] -> _splitting_method_method1_splitted_1 1054
1048 method1_splitted_1[satellite0,planet2,spectrograph0] -> _splitting_method_method1_splitted_1 1049
1039 auto_calibrate[satellite0,instrument1] -> method6 1040 1041
1035 activate_instrument[satellite0,instrument1] -> method5 1036 1039
1032 do_observation[star5,spectrograph0] -> method0 1035 1042 1043
962 do_observation[star4,spectrograph0] -> method1 1055 1058
920 do_observation[star6,thermograph1] -> method1 1060 1063
563 do_observation[planet2,spectrograph0] -> method1 1044 1048
14 do_observation[planet3,spectrograph0] -> method1 1050 1053
0 __top[] -> __top_method 563 14 962 1032 920
<==
