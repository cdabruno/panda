Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/satellite18.sas.
- State has 31 bits divided into 31 mutex groups.
- Domain contains 78 actions.
- Domain contains 98 tasks.
- Domain contains 155 methods.
- The initial state contains 8 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 98
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
Search Results
- Search time 0.004 seconds
- Visited list time 0.000285 seconds
- Visited list inserts 105
- Visited list pruned 6
- Visited list contains 99
- Visited list hash collisions 6
- Visited list used hash buckets 99
- Generated 912 search nodes
  Calculated heuristic for 770 nodes
  One modifications 131
  Effectless actions 11
- including 131 one modification actions
- including 0 one modification methods
- and       11 progressions of effectless actions
- Generated 192500 nodes per second
- Final fringe contains 134 nodes
- Status: Solved
- Found solution of length 21
- Total costs of actions: 11
==>
883 switch_on[instrument4,satellite2]
889 turn_to[satellite2,star0,planet2]
892 calibrate[satellite2,instrument4,star0]
893 turn_to[satellite2,planet2,star0]
899 take_image[satellite2,planet2,instrument4,image0]
900 turn_to[satellite2,star5,planet2]
901 take_image[satellite2,star5,instrument4,thermograph1]
902 turn_to[satellite2,planet4,star5]
906 take_image[satellite2,planet4,instrument4,thermograph1]
907 turn_to[satellite2,phenomenon3,planet4]
910 take_image[satellite2,phenomenon3,instrument4,thermograph1]
root 0
909 method1_splitted_1[satellite2,phenomenon3,thermograph1] -> _splitting_method_method1_splitted_1 910
905 method1_splitted_1[satellite2,planet4,thermograph1] -> _splitting_method_method1_splitted_1 906
898 method1_splitted_1[satellite2,planet2,image0] -> _splitting_method_method1_splitted_1 899
888 auto_calibrate[satellite2,instrument4] -> method6 889 892
882 activate_instrument[satellite2,instrument4] -> method5 883 888
857 do_observation[star5,thermograph1] -> method0 882 900 901
807 do_observation[planet2,image0] -> method1 893 898
777 do_observation[planet4,thermograph1] -> method1 902 905
6 do_observation[phenomenon3,thermograph1] -> method1 907 909
0 __top[] -> __top_method 807 6 777 857
<==
