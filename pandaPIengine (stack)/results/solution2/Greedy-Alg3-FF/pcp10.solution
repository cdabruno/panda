Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/pcp10.sas.
- State has 6 bits divided into 6 mutex groups.
- Domain contains 8 actions.
- Domain contains 11 tasks.
- Domain contains 9 methods.
- The initial state contains 1 set bits.
- The initial task is "__top[]".
- State-based goal contains 1 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 11
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 2
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
Search Results
- Search time 0 seconds
- Visited list time 2.6e-05 seconds
- Visited list inserts 13
- Visited list pruned 0
- Visited list contains 13
- Visited list hash collisions 0
- Visited list used hash buckets 13
- Generated 112 search nodes
  Calculated heuristic for 46 nodes
  One modifications 66
  Effectless actions 0
- including 66 one modification actions
- including 0 one modification methods
- and       0 progressions of effectless actions
- Generated -2147483648 nodes per second
- Final fringe contains 7 nodes
- Status: Solved
- Found solution of length 15
- Total costs of actions: 10
==>
84 t1G1[]
90 t1G2[]
98 t2G1[]
99 t2G2[]
100 p1G1[]
101 p1G2[]
102 p0G1[]
103 p0G2[]
104 p1G1[]
105 p1G2[]
root 0
97 SG2[] -> G2_S2t2_1_0 99 101 103
89 SG1[] -> G1_S2t2_1 98 100
83 SG1[] -> G1_S2t1_S_0_1 84 89 102 104
3 SG2[] -> G2_S2t1_S_1 90 97 105
0 __top[] -> __top_method 83 3
<==
