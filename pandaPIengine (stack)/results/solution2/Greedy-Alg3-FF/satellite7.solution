Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/satellite7.sas.
- State has 7 bits divided into 7 mutex groups.
- Domain contains 17 actions.
- Domain contains 22 tasks.
- Domain contains 29 methods.
- The initial state contains 2 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 22
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
Search Results
- Search time 0 seconds
- Visited list time 7.2e-05 seconds
- Visited list inserts 29
- Visited list pruned 3
- Visited list contains 26
- Visited list hash collisions 3
- Visited list used hash buckets 26
- Generated 159 search nodes
  Calculated heuristic for 82 nodes
  One modifications 71
  Effectless actions 6
- including 71 one modification actions
- including 0 one modification methods
- and       6 progressions of effectless actions
- Generated -2147483648 nodes per second
- Final fringe contains 8 nodes
- Status: Solved
- Found solution of length 14
- Total costs of actions: 9
==>
115 switch_on[instrument0,satellite0]
150 turn_to[satellite0,GroundStation2,Phenomenon6]
151 calibrate[satellite0,instrument0,GroundStation2]
152 turn_to[satellite0,Phenomenon6,GroundStation2]
153 take_image[satellite0,Phenomenon6,instrument0,thermograph0]
154 turn_to[satellite0,Star5,Phenomenon6]
155 take_image[satellite0,Star5,instrument0,thermograph0]
156 turn_to[satellite0,Phenomenon4,Star5]
157 take_image[satellite0,Phenomenon4,instrument0,thermograph0]
root 0
135 auto_calibrate[satellite0,instrument0] -> method6 150 151
31 do_observation[Phenomenon6,thermograph0] -> <method0;activate_instrument[satellite0,instrument0];method5;0;-1,-2,1,2> 115 135 152 153
11 do_observation[Star5,thermograph0] -> method1 154 155
1 do_observation[Phenomenon4,thermograph0] -> method1 156 157
0 __top[] -> __top_method 1 11 31
<==
