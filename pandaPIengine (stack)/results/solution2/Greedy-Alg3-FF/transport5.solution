Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport5.sas.
- State has 23 bits divided into 23 mutex groups.
- Domain contains 56 actions.
- Domain contains 81 tasks.
- Domain contains 74 methods.
- The initial state contains 7 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 78
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
Search Results
- Search time 0.009 seconds
- Visited list time 0.001526 seconds
- Visited list inserts 257
- Visited list pruned 25
- Visited list contains 232
- Visited list hash collisions 25
- Visited list used hash buckets 232
- Generated 890 search nodes
  Calculated heuristic for 755 nodes
  One modifications 122
  Effectless actions 13
- including 122 one modification actions
- including 0 one modification methods
- and       13 progressions of effectless actions
- Generated 83888 nodes per second
- Final fringe contains 107 nodes
- Status: Solved
- Found solution of length 60
- Total costs of actions: 27
==>
10 noop[truck-0,city-loc-1]
72 pick-up[truck-0,city-loc-1,package-4,capacity-2,capacity-3]
99 drive[truck-0,city-loc-1,city-loc-3]
105 drive[truck-0,city-loc-3,city-loc-2]
109 drive[truck-0,city-loc-2,city-loc-0]
110 noop[truck-0,city-loc-0]
117 pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2]
123 pick-up[truck-0,city-loc-0,package-2,capacity-0,capacity-1]
696 drive[truck-0,city-loc-0,city-loc-2]
702 drive[truck-0,city-loc-2,city-loc-3]
704 drive[truck-0,city-loc-3,city-loc-1]
720 drive[truck-0,city-loc-1,city-loc-1]
762 drop[truck-0,city-loc-1,package-0,capacity-0,capacity-1]
763 drive[truck-0,city-loc-1,city-loc-3]
781 drive[truck-0,city-loc-3,city-loc-2]
787 drop[truck-0,city-loc-2,package-4,capacity-1,capacity-2]
788 drive[truck-0,city-loc-2,city-loc-0]
819 pick-up[truck-0,city-loc-0,package-3,capacity-1,capacity-2]
841 drive[truck-0,city-loc-0,city-loc-2]
846 pick-up[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
849 drive[truck-0,city-loc-2,city-loc-3]
869 drive[truck-0,city-loc-3,city-loc-1]
874 drive[truck-0,city-loc-1,city-loc-3]
881 drop[truck-0,city-loc-3,package-1,capacity-0,capacity-1]
882 drive[truck-0,city-loc-3,city-loc-1]
887 drop[truck-0,city-loc-1,package-3,capacity-1,capacity-2]
888 drop[truck-0,city-loc-1,package-2,capacity-2,capacity-3]
root 0
886 unload[truck-0,city-loc-1,package-2] -> m-unload 888
875 unload[truck-0,city-loc-3,package-1] -> m-unload 881
873 unload[truck-0,city-loc-1,package-3] -> m-unload 887
848 get-to[truck-0,city-loc-3] -> m-drive-to 874
840 get-to[truck-0,city-loc-2] -> m-drive-to 841
838 get-to[truck-0,city-loc-3] -> m-drive-to-via 840 849
823 get-to[truck-0,city-loc-1] -> m-drive-to-via 838 869
818 load[truck-0,city-loc-0,package-3] -> m-load 819
783 load[truck-0,city-loc-2,package-1] -> m-load 846
722 unload[truck-0,city-loc-1,package-0] -> m-unload 762
695 get-to[truck-0,city-loc-2] -> m-drive-to 696
693 get-to[truck-0,city-loc-3] -> m-drive-to-via 695 702
568 get-to[truck-0,city-loc-1] -> m-drive-to-via 693 704
189 get-to[truck-0,city-loc-3] -> m-drive-to-via 568 763
183 get-to[truck-0,city-loc-1] -> m-drive-to-via 189 882
122 get-to[truck-0,city-loc-1] -> m-drive-to 720
116 load[truck-0,city-loc-0,package-0] -> m-load 117
113 load[truck-0,city-loc-0,package-2] -> m-load 123
107 unload[truck-0,city-loc-2,package-4] -> m-unload 787
98 get-to[truck-0,city-loc-3] -> m-drive-to 99
79 get-to[truck-0,city-loc-2] -> m-drive-to-via 98 105
71 get-to[truck-0,city-loc-0] -> m-drive-to 788
70 m-deliver_splitted_1[truck-0,package-3] -> _splitting_method_m-deliver_splitted_1 71 818
51 get-to[truck-0,city-loc-0] -> m-i-am-there 110
25 load[truck-0,city-loc-1,package-4] -> m-load 72
22 get-to[truck-0,city-loc-0] -> m-drive-to 109
19 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 22 113
14 get-to[truck-0,city-loc-2] -> m-drive-to 781
9 get-to[truck-0,city-loc-1] -> m-i-am-there 10
6 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 51 116
4 m-deliver_splitted_1[truck-0,package-4] -> _splitting_method_m-deliver_splitted_1 9 25
2 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 14 783
0 __top[] -> <<<<<__top_method;deliver[package-4,city-loc-2];m-deliver;4;0,1,2,3,-1,-2,-3>;deliver[package-3,city-loc-1];m-deliver;3;0,1,2,-1,-2,-3,4,5,6>;deliver[package-2,city-loc-1];m-deliver;2;0,1,-1,-2,-3,3,4,5,6,7,8>;deliver[package-1,city-loc-3];m-deliver;1;0,-1,-2,-3,2,3,4,5,6,7,8,9,10>;deliver[package-0,city-loc-1];m-deliver;0;-1,-2,-3,1,2,3,4,5,6,7,8,9,10,11,12> 6 122 722 2 848 875 19 183 886 70 823 873 4 79 107
<==
