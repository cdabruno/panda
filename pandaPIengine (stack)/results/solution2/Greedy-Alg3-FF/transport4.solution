Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport4.sas.
- State has 20 bits divided into 20 mutex groups.
- Domain contains 47 actions.
- Domain contains 68 tasks.
- Domain contains 63 methods.
- The initial state contains 6 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 65
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (1 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
Search Results
- Search time 0.003 seconds
- Visited list time 0.000489 seconds
- Visited list inserts 87
- Visited list pruned 20
- Visited list contains 67
- Visited list hash collisions 20
- Visited list used hash buckets 67
- Generated 360 search nodes
  Calculated heuristic for 260 nodes
  One modifications 90
  Effectless actions 10
- including 90 one modification actions
- including 0 one modification methods
- and       10 progressions of effectless actions
- Generated 86666 nodes per second
- Final fringe contains 76 nodes
- Status: Solved
- Found solution of length 49
- Total costs of actions: 22
==>
9 noop[truck-0,city-loc-0]
31 pick-up[truck-0,city-loc-0,package-0,capacity-2,capacity-3]
39 drive[truck-0,city-loc-0,city-loc-3]
40 noop[truck-0,city-loc-3]
53 pick-up[truck-0,city-loc-3,package-2,capacity-1,capacity-2]
57 drive[truck-0,city-loc-3,city-loc-2]
63 drive[truck-0,city-loc-2,city-loc-1]
64 noop[truck-0,city-loc-1]
76 pick-up[truck-0,city-loc-1,package-1,capacity-0,capacity-1]
324 drive[truck-0,city-loc-1,city-loc-2]
325 drive[truck-0,city-loc-2,city-loc-3]
329 drop[truck-0,city-loc-3,package-0,capacity-0,capacity-1]
330 drive[truck-0,city-loc-3,city-loc-2]
331 drive[truck-0,city-loc-2,city-loc-1]
336 drop[truck-0,city-loc-1,package-2,capacity-1,capacity-2]
337 drive[truck-0,city-loc-1,city-loc-2]
341 pick-up[truck-0,city-loc-2,package-3,capacity-1,capacity-2]
347 drive[truck-0,city-loc-2,city-loc-3]
348 drive[truck-0,city-loc-3,city-loc-0]
349 noop[truck-0,city-loc-0]
356 drop[truck-0,city-loc-0,package-1,capacity-1,capacity-2]
357 drop[truck-0,city-loc-0,package-3,capacity-2,capacity-3]
root 0
355 unload[truck-0,city-loc-0,package-1] -> m-unload 356
353 unload[truck-0,city-loc-0,package-3] -> m-unload 357
346 get-to[truck-0,city-loc-0] -> m-i-am-there 349
323 get-to[truck-0,city-loc-2] -> m-drive-to 324
220 get-to[truck-0,city-loc-3] -> m-drive-to-via 323 325
118 get-to[truck-0,city-loc-2] -> m-drive-to-via 220 330
106 get-to[truck-0,city-loc-1] -> m-drive-to-via 118 331
93 get-to[truck-0,city-loc-2] -> m-drive-to-via 106 337
86 get-to[truck-0,city-loc-3] -> m-drive-to-via 93 347
79 get-to[truck-0,city-loc-0] -> m-drive-to-via 86 348
69 load[truck-0,city-loc-1,package-1] -> m-load 76
67 unload[truck-0,city-loc-1,package-2] -> m-unload 336
62 load[truck-0,city-loc-2,package-3] -> m-load 341
56 get-to[truck-0,city-loc-1] -> m-i-am-there 64
47 load[truck-0,city-loc-3,package-2] -> m-load 53
46 unload[truck-0,city-loc-3,package-0] -> m-unload 329
38 get-to[truck-0,city-loc-3] -> m-i-am-there 40
26 get-to[truck-0,city-loc-2] -> m-drive-to 57
19 get-to[truck-0,city-loc-3] -> m-drive-to 39
16 get-to[truck-0,city-loc-1] -> m-drive-to 63
13 load[truck-0,city-loc-0,package-0] -> m-load 31
11 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 19 47
8 get-to[truck-0,city-loc-0] -> m-i-am-there 9
6 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 8 13
4 m-deliver_splitted_1[truck-0,package-3] -> _splitting_method_m-deliver_splitted_1 26 62
2 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 16 69
0 __top[] -> <<<<__top_method;deliver[package-3,city-loc-0];m-deliver;3;0,1,2,-1,-2,-3>;deliver[package-2,city-loc-1];m-deliver;2;0,1,-1,-2,-3,3,4,5>;deliver[package-1,city-loc-0];m-deliver;1;0,-1,-2,-3,2,3,4,5,6,7>;deliver[package-0,city-loc-3];m-deliver;0;-1,-2,-3,1,2,3,4,5,6,7,8,9> 6 38 46 2 79 355 11 56 67 4 346 353
<==
