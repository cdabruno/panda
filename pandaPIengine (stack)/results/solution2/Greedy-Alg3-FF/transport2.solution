Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport2.sas.
- State has 16 bits divided into 16 mutex groups.
- Domain contains 28 actions.
- Domain contains 45 tasks.
- Domain contains 41 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 42
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
- Starting state heuristic value: 25
Search Results
- Search time 0.163 seconds
- Visited list time 0.037974 seconds
- Visited list inserts 15968
- Visited list pruned 4589
- Visited list contains 11379
- Visited list hash collisions 4593
- Visited list used hash buckets 11375
- Generated 54236 search nodes
  Calculated heuristic for 44043 nodes
  One modifications 9189
  Effectless actions 1004
- including 9189 one modification actions
- including 0 one modification methods
- and       1004 progressions of effectless actions
- Generated 270202 nodes per second
- Final fringe contains 6310 nodes
- Status: Solved
- Found solution of length 36
- Total costs of actions: 16
==>
13 noop[truck-0,city-loc-3]
24 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2]
54155 drive[truck-0,city-loc-3,city-loc-1]
54161 drive[truck-0,city-loc-1,city-loc-2]
54162 noop[truck-0,city-loc-2]
54169 pick-up[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
54208 drive[truck-0,city-loc-2,city-loc-1]
54212 drop[truck-0,city-loc-1,package-0,capacity-0,capacity-1]
54213 drive[truck-0,city-loc-1,city-loc-2]
54216 pick-up[truck-0,city-loc-2,package-2,capacity-0,capacity-1]
54224 drive[truck-0,city-loc-2,city-loc-1]
54225 drive[truck-0,city-loc-1,city-loc-3]
54226 drive[truck-0,city-loc-3,city-loc-0]
54227 noop[truck-0,city-loc-0]
54233 drop[truck-0,city-loc-0,package-2,capacity-0,capacity-1]
54234 drop[truck-0,city-loc-0,package-1,capacity-1,capacity-2]
root 0
54232 unload[truck-0,city-loc-0,package-2] -> m-unload 54233
54229 unload[truck-0,city-loc-0,package-1] -> m-unload 54234
54223 get-to[truck-0,city-loc-0] -> m-i-am-there 54227
54207 get-to[truck-0,city-loc-1] -> m-drive-to 54208
54205 get-to[truck-0,city-loc-2] -> m-drive-to-via 54207 54213
54184 get-to[truck-0,city-loc-1] -> m-drive-to-via 54205 54224
54177 get-to[truck-0,city-loc-3] -> m-drive-to-via 54184 54225
54173 get-to[truck-0,city-loc-0] -> m-drive-to-via 54177 54226
54166 load[truck-0,city-loc-2,package-2] -> m-load 54216
54164 load[truck-0,city-loc-2,package-1] -> m-load 54169
54160 unload[truck-0,city-loc-1,package-0] -> m-unload 54212
54154 get-to[truck-0,city-loc-1] -> m-drive-to 54155
23 get-to[truck-0,city-loc-2] -> m-i-am-there 54162
17 load[truck-0,city-loc-3,package-0] -> m-load 24
12 get-to[truck-0,city-loc-3] -> m-i-am-there 13
7 get-to[truck-0,city-loc-2] -> m-drive-to 54161
6 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 7 54164
4 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 23 54166
2 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 12 17
0 __top[] -> <<<__top_method;deliver[package-2,city-loc-0];m-deliver;2;0,1,-1,-2,-3>;deliver[package-1,city-loc-0];m-deliver;1;0,-1,-2,-3,2,3,4>;deliver[package-0,city-loc-1];m-deliver;0;-1,-2,-3,1,2,3,4,5,6> 2 54154 54160 6 54173 54229 4 54223 54232
<==
