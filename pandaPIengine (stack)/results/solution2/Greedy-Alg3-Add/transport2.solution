Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport2.sas.
- State has 16 bits divided into 16 mutex groups.
- Domain contains 28 actions.
- Domain contains 45 tasks.
- Domain contains 41 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 42
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
- Starting state heuristic value: 45
Search Results
- Search time 0.107 seconds
- Visited list time 0.028843 seconds
- Visited list inserts 6535
- Visited list pruned 2450
- Visited list contains 4085
- Visited list hash collisions 2450
- Visited list used hash buckets 4085
- Generated 20478 search nodes
  Calculated heuristic for 14904 nodes
  One modifications 4777
  Effectless actions 797
- including 4777 one modification actions
- including 0 one modification methods
- and       797 progressions of effectless actions
- Generated 139289 nodes per second
- Final fringe contains 1955 nodes
- Status: Solved
- Found solution of length 32
- Total costs of actions: 14
==>
13 noop[truck-0,city-loc-3]
21 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2]
20394 drive[truck-0,city-loc-3,city-loc-1]
20418 drop[truck-0,city-loc-1,package-0,capacity-1,capacity-2]
20419 drive[truck-0,city-loc-1,city-loc-2]
20420 noop[truck-0,city-loc-2]
20424 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2]
20429 pick-up[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
20464 drive[truck-0,city-loc-2,city-loc-1]
20465 drive[truck-0,city-loc-1,city-loc-3]
20466 drive[truck-0,city-loc-3,city-loc-0]
20467 noop[truck-0,city-loc-0]
20474 drop[truck-0,city-loc-0,package-1,capacity-0,capacity-1]
20475 drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2]
root 0
20473 unload[truck-0,city-loc-0,package-2] -> m-unload 20475
20472 unload[truck-0,city-loc-0,package-1] -> m-unload 20474
20463 get-to[truck-0,city-loc-1] -> m-drive-to 20464
20460 get-to[truck-0,city-loc-3] -> m-drive-to-via 20463 20465
20450 get-to[truck-0,city-loc-0] -> m-drive-to-via 20460 20466
20428 get-to[truck-0,city-loc-0] -> m-i-am-there 20467
20423 load[truck-0,city-loc-2,package-1] -> m-load 20429
20422 load[truck-0,city-loc-2,package-2] -> m-load 20424
20402 unload[truck-0,city-loc-1,package-0] -> m-unload 20418
20393 get-to[truck-0,city-loc-1] -> m-drive-to 20394
20 get-to[truck-0,city-loc-2] -> m-i-am-there 20420
17 load[truck-0,city-loc-3,package-0] -> m-load 21
12 get-to[truck-0,city-loc-3] -> m-i-am-there 13
7 get-to[truck-0,city-loc-2] -> m-drive-to 20419
6 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 7 20423
4 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 20 20422
2 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 12 17
0 __top[] -> <<<__top_method;deliver[package-2,city-loc-0];m-deliver;2;0,1,-1,-2,-3>;deliver[package-1,city-loc-0];m-deliver;1;0,-1,-2,-3,2,3,4>;deliver[package-0,city-loc-1];m-deliver;0;-1,-2,-3,1,2,3,4,5,6> 2 20393 20402 6 20450 20472 4 20428 20473
<==
