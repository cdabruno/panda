Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport3.sas.
- State has 15 bits divided into 15 mutex groups.
- Domain contains 28 actions.
- Domain contains 44 tasks.
- Domain contains 42 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 42
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 2
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy A* Search with weight 2
- Distance G is "modification depth"
- Starting state heuristic value: 48
Search Results
- Search time 0.011 seconds
- Visited list time 0.002406 seconds
- Visited list inserts 648
- Visited list pruned 259
- Visited list contains 389
- Visited list hash collisions 259
- Visited list used hash buckets 389
- Generated 2349 search nodes
  Calculated heuristic for 1615 nodes
  One modifications 647
  Effectless actions 87
- including 647 one modification actions
- including 0 one modification methods
- and       87 progressions of effectless actions
- Generated 146818 nodes per second
- Final fringe contains 364 nodes
- Status: Solved
- Found solution of length 30
- Total costs of actions: 13
==>
20 drive[truck-0,city-loc-0,city-loc-1]
31 pick-up[truck-0,city-loc-1,package-0,capacity-1,capacity-2]
40 drive[truck-0,city-loc-1,city-loc-2]
67 pick-up[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
2306 drive[truck-0,city-loc-2,city-loc-1]
2315 drop[truck-0,city-loc-1,package-1,capacity-0,capacity-1]
2316 drive[truck-0,city-loc-1,city-loc-2]
2318 pick-up[truck-0,city-loc-2,package-2,capacity-0,capacity-1]
2333 drive[truck-0,city-loc-2,city-loc-1]
2334 drive[truck-0,city-loc-1,city-loc-0]
2343 drop[truck-0,city-loc-0,package-2,capacity-0,capacity-1]
2344 drive[truck-0,city-loc-0,city-loc-0]
2346 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2]
root 0
2345 unload[truck-0,city-loc-0,package-0] -> m-unload 2346
2341 unload[truck-0,city-loc-0,package-2] -> m-unload 2343
2332 get-to[truck-0,city-loc-1] -> m-drive-to 2333
2323 get-to[truck-0,city-loc-0] -> m-drive-to-via 2332 2334
2317 load[truck-0,city-loc-2,package-2] -> m-load 2318
2313 unload[truck-0,city-loc-1,package-1] -> m-unload 2315
2305 get-to[truck-0,city-loc-1] -> m-drive-to 2306
66 load[truck-0,city-loc-2,package-1] -> m-load 67
33 get-to[truck-0,city-loc-0] -> m-drive-to 2344
28 load[truck-0,city-loc-1,package-0] -> m-load 31
19 get-to[truck-0,city-loc-2] -> m-drive-to 2316
12 get-to[truck-0,city-loc-1] -> m-drive-to 20
7 get-to[truck-0,city-loc-2] -> m-drive-to 40
6 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 7 66
4 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 19 2317
2 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 12 28
0 __top[] -> <<<__top_method;deliver[package-2,city-loc-0];m-deliver;2;0,1,-1,-2,-3>;deliver[package-1,city-loc-1];m-deliver;1;0,-1,-2,-3,2,3,4>;deliver[package-0,city-loc-0];m-deliver;0;-1,-2,-3,1,2,3,4,5,6> 2 33 2345 6 2305 2313 4 2323 2341
<==
