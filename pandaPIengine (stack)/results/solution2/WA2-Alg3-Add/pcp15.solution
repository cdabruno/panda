Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/pcp15.sas.
- State has 6 bits divided into 6 mutex groups.
- Domain contains 8 actions.
- Domain contains 11 tasks.
- Domain contains 9 methods.
- The initial state contains 1 set bits.
- The initial task is "__top[]".
- State-based goal contains 1 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 11
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 2
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 2
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy A* Search with weight 2
- Distance G is "modification depth"
Search Results
- Search time 0.001 seconds
- Visited list time 0.000131 seconds
- Visited list inserts 68
- Visited list pruned 0
- Visited list contains 68
- Visited list hash collisions 0
- Visited list used hash buckets 68
- Generated 664 search nodes
  Calculated heuristic for 266 nodes
  One modifications 398
  Effectless actions 0
- including 398 one modification actions
- including 0 one modification methods
- and       0 progressions of effectless actions
- Generated 266000 nodes per second
- Final fringe contains 24 nodes
- Status: Solved
- Found solution of length 33
- Total costs of actions: 24
==>
68 t2G1[]
142 t2G2[]
163 t2G1[]
363 t2G2[]
408 t1G1[]
632 t1G2[]
638 t1G1[]
639 t1G2[]
640 p0G1[]
641 p0G2[]
642 p0G1[]
643 p0G2[]
644 p1G1[]
645 p1G2[]
646 p0G1[]
647 p0G2[]
648 p0G1[]
649 p0G2[]
650 p1G1[]
651 p1G2[]
652 p0G1[]
653 p0G2[]
654 p0G1[]
655 p0G2[]
root 0
637 SG2[] -> G2_S2t1_0 639 641
631 SG1[] -> G1_S2t1_0_0_1 638 640 642 644
407 SG2[] -> G2_S2t1_S_0 632 637 643
362 SG1[] -> G1_S2t1_S_0_0_1 408 631 646 648 650
162 SG2[] -> G2_S2t2_S_1_0_0 363 407 645 647 649
141 SG1[] -> G1_S2t2_S_0 163 362 652
67 SG1[] -> G1_S2t2_S_0 68 141 654
4 SG2[] -> G2_S2t2_S_1_0_0 142 162 651 653 655
0 __top[] -> __top_method 67 4
<==
