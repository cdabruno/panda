Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport11.sas.
- State has 30 bits divided into 30 mutex groups.
- Domain contains 70 actions.
- Domain contains 115 tasks.
- Domain contains 109 methods.
- The initial state contains 8 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 109
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- A* Search
- Distance G is "modification depth"
- Starting state heuristic value: 62
Search Results
- Search time 0.132 seconds
- Visited list time 0.026248 seconds
- Visited list inserts 9830
- Visited list pruned 3359
- Visited list contains 6471
- Visited list hash collisions 3359
- Visited list used hash buckets 6471
- Generated 30286 search nodes
  Calculated heuristic for 21563 nodes
  One modifications 7885
  Effectless actions 838
- including 7885 one modification actions
- including 0 one modification methods
- and       838 progressions of effectless actions
- Generated 163356 nodes per second
- Final fringe contains 4852 nodes
- Status: Solved
- Found solution of length 47
- Total costs of actions: 19
==>
22043 noop[truck-0,city-loc-0]
29697 pick-up[truck-0,city-loc-0,package-2,capacity-1,capacity-2]
29702 drive[truck-1,city-loc-1,city-loc-2]
29708 pick-up[truck-1,city-loc-2,package-0,capacity-1,capacity-2]
29717 drive[truck-1,city-loc-2,city-loc-1]
29722 drop[truck-1,city-loc-1,package-0,capacity-1,capacity-2]
29797 drive[truck-1,city-loc-1,city-loc-2]
29803 pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2]
30230 drive[truck-1,city-loc-2,city-loc-1]
30232 drive[truck-1,city-loc-1,city-loc-0]
30234 drive[truck-1,city-loc-0,city-loc-3]
30239 drop[truck-1,city-loc-3,package-1,capacity-1,capacity-2]
30240 drive[truck-0,city-loc-0,city-loc-3]
30262 drop[truck-0,city-loc-3,package-2,capacity-1,capacity-2]
30263 drive[truck-0,city-loc-3,city-loc-0]
30269 pick-up[truck-0,city-loc-0,package-3,capacity-1,capacity-2]
30277 drive[truck-0,city-loc-0,city-loc-1]
30278 drive[truck-0,city-loc-1,city-loc-2]
30284 drop[truck-0,city-loc-2,package-3,capacity-1,capacity-2]
root 0
30283 unload[truck-0,city-loc-2,package-3] -> m-unload 30284
30276 get-to[truck-0,city-loc-1] -> m-drive-to 30277
30273 get-to[truck-0,city-loc-2] -> m-drive-to-via 30276 30278
30268 load[truck-0,city-loc-0,package-3] -> m-load 30269
30245 unload[truck-0,city-loc-3,package-2] -> m-unload 30262
30235 unload[truck-1,city-loc-3,package-1] -> m-unload 30239
30222 get-to[truck-1,city-loc-1] -> m-drive-to 30230
29815 get-to[truck-1,city-loc-0] -> m-drive-to-via 30222 30232
29808 get-to[truck-1,city-loc-3] -> m-drive-to-via 29815 30234
29799 load[truck-1,city-loc-2,package-1] -> m-load 29803
29719 unload[truck-1,city-loc-1,package-0] -> m-unload 29722
29709 get-to[truck-1,city-loc-1] -> m-drive-to 29717
29704 load[truck-1,city-loc-2,package-0] -> m-load 29708
29698 get-to[truck-0,city-loc-3] -> m-drive-to 30240
22047 load[truck-0,city-loc-0,package-2] -> m-load 29697
22042 get-to[truck-0,city-loc-0] -> m-i-am-there 22043
42 get-to[truck-0,city-loc-0] -> m-drive-to 30263
28 m-deliver_splitted_1[truck-0,package-3] -> _splitting_method_m-deliver_splitted_1 42 30268
26 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 22042 22047
21 get-to[truck-1,city-loc-2] -> m-drive-to 29702
19 m-deliver_splitted_1[truck-1,package-0] -> _splitting_method_m-deliver_splitted_1 21 29704
16 deliver[package-3,city-loc-2] -> m-deliver 28 30273 30283
14 deliver[package-2,city-loc-3] -> m-deliver 26 29698 30245
13 deliver[package-0,city-loc-1] -> m-deliver 19 29709 29719
8 get-to[truck-1,city-loc-2] -> m-drive-to 29797
6 m-deliver_splitted_1[truck-1,package-1] -> _splitting_method_m-deliver_splitted_1 8 29799
2 deliver[package-1,city-loc-3] -> m-deliver 6 29808 30235
0 __top[] -> __top_method 13 2 14 16
<==
