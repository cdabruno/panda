Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/umtranslog3.sas.
- State has 11 bits divided into 11 mutex groups.
- Domain contains 11 actions.
- Domain contains 12 tasks.
- Domain contains 1 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 1 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 12
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0 seconds
- Visited list time 7e-06 seconds
- Visited list inserts 2
- Visited list pruned 0
- Visited list contains 2
- Visited list hash collisions 0
- Visited list used hash buckets 2
- Generated 16 search nodes
  Calculated heuristic for 2 nodes
  One modifications 10
  Effectless actions 4
- including 10 one modification actions
- including 0 one modification methods
- and       4 progressions of effectless actions
- Generated -2147483648 nodes per second
- Final fringe contains 0 nodes
- Status: Solved
- Found solution of length 15
- Total costs of actions: 14
==>
1 collect_fees[Gemaelde]
2 collect_insurance[Gemaelde]
3 post_guard_outside[Pferd]
4 open_door[Pferd]
5 load_package[Gemaelde,Pferd,O27]
6 close_door[Pferd]
7 post_guard_inside[Pferd]
8 move_vehicle_no_traincar[Pferd,O27,James_Franck_Ring,O28]
9 post_guard_outside[Pferd]
10 open_door[Pferd]
11 unload_package[Gemaelde,Pferd,O28]
12 close_door[Pferd]
13 remove_guard[Pferd]
14 deliver_v[Gemaelde]
root 0
0 __top[] -> <<<<<<<<<<<__top_method;transport[Gemaelde,O27,O28];method_transport_pi_ca_de;0;-1,-2,-3>;carry[Gemaelde,O27,O28];method_carry_cd;1;0,-1,2>;carry_direct[Gemaelde,O27,O28];method_carry_direct;1;0,-1,2>;helper_carry_direct[Pferd,Gemaelde,O27,O28];method_helper_carry_direct_noMoveFirst;1;0,-1,-2,-3,2>;unload_top[Gemaelde,Pferd,O28];method_unload_top_valuable;3;0,1,2,-1,-2,-3,4>;unload[Gemaelde,Pferd,O28];method_unload_regular;4;0,1,2,3,-1,-2,-3,5,6>;move[Pferd,O27,O28];method_move_no_traincar;2;0,1,-1,3,4,5,6,7,8>;load_top[Gemaelde,Pferd,O27];method_load_top_valuable;1;0,-1,-2,-3,2,3,4,5,6,7,8>;load[Gemaelde,Pferd,O27];method_load_regular;2;0,1,-1,-2,-3,3,4,5,6,7,8,9,10>;deliver[Gemaelde];method_deliver_dv;12;0,1,2,3,4,5,6,7,8,9,10,11,-1>;pickup[Gemaelde];method_pickup_valuable;0;-1,-2,1,2,3,4,5,6,7,8,9,10,11,12> 1 2 3 4 5 6 7 8 9 10 11 12 13 14
<==
