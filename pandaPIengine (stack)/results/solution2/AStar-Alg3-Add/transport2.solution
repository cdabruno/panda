Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport2.sas.
- State has 16 bits divided into 16 mutex groups.
- Domain contains 28 actions.
- Domain contains 45 tasks.
- Domain contains 41 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 42
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- A* Search
- Distance G is "modification depth"
- Starting state heuristic value: 45
Search Results
- Search time 0.001 seconds
- Visited list time 0.000328 seconds
- Visited list inserts 80
- Visited list pruned 4
- Visited list contains 76
- Visited list hash collisions 4
- Visited list used hash buckets 76
- Generated 284 search nodes
  Calculated heuristic for 233 nodes
  One modifications 44
  Effectless actions 7
- including 44 one modification actions
- including 0 one modification methods
- and       7 progressions of effectless actions
- Generated 233000 nodes per second
- Final fringe contains 58 nodes
- Status: Solved
- Found solution of length 32
- Total costs of actions: 14
==>
13 noop[truck-0,city-loc-3]
21 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2]
79 drive[truck-0,city-loc-3,city-loc-1]
90 drop[truck-0,city-loc-1,package-0,capacity-1,capacity-2]
91 drive[truck-0,city-loc-1,city-loc-2]
92 noop[truck-0,city-loc-2]
152 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2]
156 pick-up[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
268 drive[truck-0,city-loc-2,city-loc-1]
269 drive[truck-0,city-loc-1,city-loc-3]
270 drive[truck-0,city-loc-3,city-loc-0]
271 noop[truck-0,city-loc-0]
278 drop[truck-0,city-loc-0,package-2,capacity-0,capacity-1]
279 drop[truck-0,city-loc-0,package-1,capacity-1,capacity-2]
root 0
277 unload[truck-0,city-loc-0,package-1] -> m-unload 279
276 unload[truck-0,city-loc-0,package-2] -> m-unload 278
267 get-to[truck-0,city-loc-1] -> m-drive-to 268
201 get-to[truck-0,city-loc-3] -> m-drive-to-via 267 269
168 get-to[truck-0,city-loc-0] -> m-drive-to-via 201 270
155 get-to[truck-0,city-loc-0] -> m-i-am-there 271
151 load[truck-0,city-loc-2,package-2] -> m-load 152
100 load[truck-0,city-loc-2,package-1] -> m-load 156
87 unload[truck-0,city-loc-1,package-0] -> m-unload 90
78 get-to[truck-0,city-loc-1] -> m-drive-to 79
20 get-to[truck-0,city-loc-2] -> m-i-am-there 92
17 load[truck-0,city-loc-3,package-0] -> m-load 21
12 get-to[truck-0,city-loc-3] -> m-i-am-there 13
7 get-to[truck-0,city-loc-2] -> m-drive-to 91
6 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 7 100
4 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 20 151
2 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 12 17
0 __top[] -> <<<__top_method;deliver[package-2,city-loc-0];m-deliver;2;0,1,-1,-2,-3>;deliver[package-1,city-loc-0];m-deliver;1;0,-1,-2,-3,2,3,4>;deliver[package-0,city-loc-1];m-deliver;0;-1,-2,-3,1,2,3,4,5,6> 2 78 87 6 168 277 4 155 276
<==
