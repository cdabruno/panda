Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport12.sas.
- State has 32 bits divided into 32 mutex groups.
- Domain contains 82 actions.
- Domain contains 129 tasks.
- Domain contains 131 methods.
- The initial state contains 8 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 121
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (1 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- A* Search
- Distance G is "modification depth"
   1s visitime    0.16s generated nodes    145054 nodes/sec  140692 cur h   16 mod.depth   27 inserts     50541 dups     11503 size     39038 hash fail  11550 hash buckets  38991
   2s visitime    0.32s generated nodes    235116 nodes/sec  113637 cur h   23 mod.depth   20 inserts     79920 dups     19259 size     60661 hash fail  19370 hash buckets  60550
   3s visitime    0.47s generated nodes    315146 nodes/sec  101170 cur h   19 mod.depth   24 inserts    104043 dups     24177 size     79866 hash fail  24359 hash buckets  79684
   4s visitime    0.62s generated nodes    400191 nodes/sec   95785 cur h   21 mod.depth   23 inserts    128842 dups     29367 size     99475 hash fail  29645 hash buckets  99197
   5s visitime    0.78s generated nodes    540271 nodes/sec  103978 cur h   21 mod.depth   23 inserts    174049 dups     41103 size    132946 hash fail  41608 hash buckets 132441
   6s visitime    0.96s generated nodes    635308 nodes/sec  101861 cur h   15 mod.depth   29 inserts    206800 dups     51156 size    155644 hash fail  51842 hash buckets 154958
   7s visitime    1.12s generated nodes    710361 nodes/sec   98021 cur h   20 mod.depth   24 inserts    233273 dups     59706 size    173567 hash fail  60547 hash buckets 172726
   8s visitime    1.29s generated nodes    785390 nodes/sec   94888 cur h   22 mod.depth   22 inserts    260117 dups     68028 size    192089 hash fail  69063 hash buckets 191054
   9s visitime    1.47s generated nodes    905432 nodes/sec   97337 cur h   23 mod.depth   21 inserts    306943 dups     86106 size    220837 hash fail  87486 hash buckets 219457
  10s visitime    1.67s generated nodes   1005488 nodes/sec   97120 cur h   23 mod.depth   21 inserts    348508 dups    104061 size    244447 hash fail 105771 hash buckets 242737
  11s visitime    1.86s generated nodes   1080521 nodes/sec   94699 cur h   21 mod.depth   24 inserts    376758 dups    114954 size    261804 hash fail 116911 hash buckets 259847
  12s visitime    2.00s generated nodes   1160572 nodes/sec   93181 cur h   18 mod.depth   27 inserts    397191 dups    118794 size    278397 hash fail 121024 hash buckets 276167
  13s visitime    2.14s generated nodes   1285624 nodes/sec   95372 cur h   21 mod.depth   23 inserts    429336 dups    124978 size    304358 hash fail 127680 hash buckets 301656
  14s visitime    2.29s generated nodes   1395675 nodes/sec   96286 cur h   22 mod.depth   22 inserts    460450 dups    132061 size    328389 hash fail 135247 hash buckets 325203
  15s visitime    2.44s generated nodes   1475713 nodes/sec   94913 cur h   21 mod.depth   24 inserts    482795 dups    137227 size    345568 hash fail 140785 hash buckets 342010
Search Results
- Search time 16.41 seconds
- Visited list time 2.57 seconds
- Visited list inserts 501513
- Visited list pruned 141703
- Visited list contains 359810
- Visited list hash collisions 145582
- Visited list used hash buckets 355931
- Generated 1540228 search nodes
  Calculated heuristic for 1205605 nodes
  One modifications 286940
  Effectless actions 47683
- including 286940 one modification actions
- including 0 one modification methods
- and       47683 progressions of effectless actions
- Generated 73467 nodes per second
- Final fringe contains 469655 nodes
- Status: Solved
- Found solution of length 45
- Total costs of actions: 18
==>
309124 drive[truck-1,city-loc-1,city-loc-1]
309159 pick-up[truck-1,city-loc-1,package-1,capacity-1,capacity-2]
309161 drive[truck-1,city-loc-1,city-loc-3]
309735 drive[truck-1,city-loc-3,city-loc-2]
309974 drive[truck-1,city-loc-2,city-loc-3]
315797 pick-up[truck-1,city-loc-3,package-2,capacity-0,capacity-1]
315993 drive[truck-1,city-loc-3,city-loc-2]
316006 drop[truck-1,city-loc-2,package-1,capacity-0,capacity-1]
316008 drop[truck-1,city-loc-2,package-2,capacity-1,capacity-2]
316009 drive[truck-1,city-loc-2,city-loc-1]
316011 pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2]
316015 drive[truck-1,city-loc-1,city-loc-3]
316020 drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2]
316021 pick-up[truck-1,city-loc-3,package-0,capacity-1,capacity-2]
1370470 drive[truck-1,city-loc-3,city-loc-1]
1370471 drive[truck-1,city-loc-1,city-loc-4]
1370472 drive[truck-1,city-loc-4,city-loc-0]
1370481 drop[truck-1,city-loc-0,package-0,capacity-1,capacity-2]
root 0
1370480 unload[truck-1,city-loc-0,package-0] -> m-unload 1370481
1370469 get-to[truck-1,city-loc-1] -> m-drive-to 1370470
600151 get-to[truck-1,city-loc-4] -> m-drive-to-via 1370469 1370471
316027 get-to[truck-1,city-loc-0] -> m-drive-to-via 600151 1370472
316019 unload[truck-1,city-loc-3,package-3] -> m-unload 316020
316014 get-to[truck-1,city-loc-3] -> m-drive-to 316015
316010 load[truck-1,city-loc-1,package-3] -> m-load 316011
315998 unload[truck-1,city-loc-2,package-2] -> m-unload 316008
315992 get-to[truck-1,city-loc-2] -> m-drive-to 315993
315796 load[truck-1,city-loc-3,package-2] -> m-load 315797
309973 unload[truck-1,city-loc-2,package-1] -> m-unload 316006
309734 load[truck-1,city-loc-3,package-0] -> m-load 316021
309160 get-to[truck-1,city-loc-2] -> m-drive-to 309735
309125 load[truck-1,city-loc-1,package-1] -> m-load 309159
309106 get-to[truck-1,city-loc-1] -> m-drive-to 316009
309071 get-to[truck-1,city-loc-1] -> m-drive-to 309124
309057 m-deliver_splitted_1[truck-1,package-1] -> _splitting_method_m-deliver_splitted_1 309071 309125
309052 get-to[truck-1,city-loc-3] -> m-drive-to 309161
309048 m-deliver_splitted_1[truck-1,package-3] -> _splitting_method_m-deliver_splitted_1 309106 316010
309046 m-deliver_splitted_1[truck-1,package-0] -> _splitting_method_m-deliver_splitted_1 309052 309734
309044 deliver[package-0,city-loc-0] -> m-deliver 309046 316027 1370480
309042 deliver[package-3,city-loc-3] -> m-deliver 309048 316014 316019
72269 get-to[truck-1,city-loc-3] -> m-drive-to 309974
72268 m-deliver_splitted_1[truck-1,package-2] -> _splitting_method_m-deliver_splitted_1 72269 315796
3 deliver[package-2,city-loc-2] -> m-deliver 72268 315992 315998
1 deliver[package-1,city-loc-2] -> m-deliver 309057 309160 309973
0 __top[] -> __top_method 309044 1 3 309042
<==
