Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport2.sas.
- State has 16 bits divided into 16 mutex groups.
- Domain contains 28 actions.
- Domain contains 45 tasks.
- Domain contains 41 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 42
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.009 seconds
- Visited list time 0.001381 seconds
- Visited list inserts 309
- Visited list pruned 24
- Visited list contains 285
- Visited list hash collisions 24
- Visited list used hash buckets 285
- Generated 1145 search nodes
  Calculated heuristic for 896 nodes
  One modifications 214
  Effectless actions 35
- including 214 one modification actions
- including 0 one modification methods
- and       35 progressions of effectless actions
- Generated 99555 nodes per second
- Final fringe contains 268 nodes
- Status: Solved
- Found solution of length 32
- Total costs of actions: 14
==>
41 noop[truck-0,city-loc-3]
50 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2]
96 drive[truck-0,city-loc-3,city-loc-1]
107 drop[truck-0,city-loc-1,package-0,capacity-1,capacity-2]
108 drive[truck-0,city-loc-1,city-loc-2]
109 noop[truck-0,city-loc-2]
231 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2]
734 pick-up[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
742 drive[truck-0,city-loc-2,city-loc-1]
743 drive[truck-0,city-loc-1,city-loc-3]
744 drive[truck-0,city-loc-3,city-loc-0]
745 noop[truck-0,city-loc-0]
1034 drop[truck-0,city-loc-0,package-2,capacity-0,capacity-1]
1035 drop[truck-0,city-loc-0,package-1,capacity-1,capacity-2]
root 0
1033 unload[truck-0,city-loc-0,package-1] -> m-unload 1035
815 unload[truck-0,city-loc-0,package-2] -> m-unload 1034
741 get-to[truck-0,city-loc-0] -> m-i-am-there 745
729 get-to[truck-0,city-loc-1] -> m-drive-to 742
268 get-to[truck-0,city-loc-3] -> m-drive-to-via 729 743
255 get-to[truck-0,city-loc-0] -> m-drive-to-via 268 744
230 load[truck-0,city-loc-2,package-1] -> m-load 734
204 load[truck-0,city-loc-2,package-2] -> m-load 231
104 unload[truck-0,city-loc-1,package-0] -> m-unload 107
95 get-to[truck-0,city-loc-1] -> m-drive-to 96
49 get-to[truck-0,city-loc-2] -> m-drive-to 108
45 load[truck-0,city-loc-3,package-0] -> m-load 50
40 get-to[truck-0,city-loc-3] -> m-i-am-there 41
8 get-to[truck-0,city-loc-2] -> m-i-am-there 109
6 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 8 230
4 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 49 204
2 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 40 45
0 __top[] -> <<<__top_method;deliver[package-2,city-loc-0];m-deliver;2;0,1,-1,-2,-3>;deliver[package-1,city-loc-0];m-deliver;1;0,-1,-2,-3,2,3,4>;deliver[package-0,city-loc-1];m-deliver;0;-1,-2,-3,1,2,3,4,5,6> 2 95 104 6 741 1033 4 255 815
<==
