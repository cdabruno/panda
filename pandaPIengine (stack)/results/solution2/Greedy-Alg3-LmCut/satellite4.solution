Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/satellite4.sas.
- State has 9 bits divided into 9 mutex groups.
- Domain contains 17 actions.
- Domain contains 24 tasks.
- Domain contains 29 methods.
- The initial state contains 2 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 24
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
- Starting state heuristic value: 10
Search Results
- Search time 0.002 seconds
- Visited list time 9.3e-05 seconds
- Visited list inserts 33
- Visited list pruned 0
- Visited list contains 33
- Visited list hash collisions 0
- Visited list used hash buckets 33
- Generated 165 search nodes
  Calculated heuristic for 112 nodes
  One modifications 50
  Effectless actions 3
- including 50 one modification actions
- including 0 one modification methods
- and       3 progressions of effectless actions
- Generated 56000 nodes per second
- Final fringe contains 9 nodes
- Status: Solved
- Found solution of length 18
- Total costs of actions: 11
==>
132 switch_on[instrument02,satellite0]
147 turn_to[satellite0,GroundStation0,Phenomenon6]
150 calibrate[satellite0,instrument02,GroundStation0]
152 turn_to[satellite0,Star5,GroundStation0]
153 take_image[satellite0,Star5,instrument02,x_ray]
154 switch_off[instrument02,satellite0]
155 switch_on[instrument01,satellite0]
158 turn_to[satellite0,GroundStation0,Star5]
159 calibrate[satellite0,instrument01,GroundStation0]
160 turn_to[satellite0,Phenomenon4,GroundStation0]
161 take_image[satellite0,Phenomenon4,instrument01,thermograph]
root 0
157 auto_calibrate[satellite0,instrument01] -> method6 158 159
136 auto_calibrate[satellite0,instrument02] -> method6 147 150
131 activate_instrument[satellite0,instrument01] -> method4 154 155 157
50 do_observation[Phenomenon4,thermograph] -> method0 131 160 161
40 activate_instrument[satellite0,instrument02] -> method5 132 136
7 do_observation[Star5,x_ray] -> method0 40 152 153
0 __top[] -> __top_method 50 7
<==
