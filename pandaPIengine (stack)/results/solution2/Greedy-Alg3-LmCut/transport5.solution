Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport5.sas.
- State has 23 bits divided into 23 mutex groups.
- Domain contains 56 actions.
- Domain contains 81 tasks.
- Domain contains 74 methods.
- The initial state contains 7 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 78
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
- Starting state heuristic value: 31
Search Results
- Search time 0.027 seconds
- Visited list time 0.000406 seconds
- Visited list inserts 96
- Visited list pruned 3
- Visited list contains 93
- Visited list hash collisions 3
- Visited list used hash buckets 93
- Generated 376 search nodes
  Calculated heuristic for 316 nodes
  One modifications 54
  Effectless actions 6
- including 54 one modification actions
- including 0 one modification methods
- and       6 progressions of effectless actions
- Generated 11703 nodes per second
- Final fringe contains 76 nodes
- Status: Solved
- Found solution of length 64
- Total costs of actions: 29
==>
10 noop[truck-0,city-loc-1]
94 drive[truck-0,city-loc-1,city-loc-3]
100 drive[truck-0,city-loc-3,city-loc-2]
101 drive[truck-0,city-loc-2,city-loc-0]
102 noop[truck-0,city-loc-0]
113 pick-up[truck-0,city-loc-0,package-2,capacity-2,capacity-3]
122 pick-up[truck-0,city-loc-0,package-0,capacity-1,capacity-2]
151 drive[truck-0,city-loc-0,city-loc-2]
156 drive[truck-0,city-loc-2,city-loc-0]
159 pick-up[truck-0,city-loc-0,package-3,capacity-0,capacity-1]
193 drive[truck-0,city-loc-0,city-loc-2]
198 drive[truck-0,city-loc-2,city-loc-3]
201 drive[truck-0,city-loc-3,city-loc-1]
202 noop[truck-0,city-loc-1]
217 drop[truck-0,city-loc-1,package-0,capacity-0,capacity-1]
218 pick-up[truck-0,city-loc-1,package-4,capacity-0,capacity-1]
253 drive[truck-0,city-loc-1,city-loc-3]
254 drive[truck-0,city-loc-3,city-loc-2]
257 drive[truck-0,city-loc-2,city-loc-3]
290 drive[truck-0,city-loc-3,city-loc-2]
303 drop[truck-0,city-loc-2,package-4,capacity-0,capacity-1]
304 pick-up[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
354 drive[truck-0,city-loc-2,city-loc-3]
359 drive[truck-0,city-loc-3,city-loc-1]
360 drop[truck-0,city-loc-1,package-2,capacity-0,capacity-1]
361 drive[truck-0,city-loc-1,city-loc-3]
369 drop[truck-0,city-loc-3,package-1,capacity-1,capacity-2]
370 drive[truck-0,city-loc-3,city-loc-1]
372 drop[truck-0,city-loc-1,package-3,capacity-2,capacity-3]
root 0
371 unload[truck-0,city-loc-1,package-3] -> m-unload 372
365 unload[truck-0,city-loc-3,package-1] -> m-unload 369
353 get-to[truck-0,city-loc-3] -> m-drive-to 354
322 get-to[truck-0,city-loc-1] -> m-drive-to-via 353 359
310 get-to[truck-0,city-loc-3] -> m-drive-to-via 322 361
302 unload[truck-0,city-loc-2,package-4] -> m-unload 303
256 load[truck-0,city-loc-2,package-1] -> m-load 304
244 get-to[truck-0,city-loc-3] -> m-drive-to 253
235 get-to[truck-0,city-loc-2] -> m-drive-to-via 244 290
206 unload[truck-0,city-loc-1,package-2] -> m-unload 360
203 unload[truck-0,city-loc-1,package-0] -> m-unload 217
192 get-to[truck-0,city-loc-2] -> m-drive-to 193
175 get-to[truck-0,city-loc-3] -> m-drive-to-via 192 257
165 get-to[truck-0,city-loc-1] -> m-drive-to-via 175 370
158 load[truck-0,city-loc-0,package-3] -> m-load 159
150 get-to[truck-0,city-loc-2] -> m-drive-to 151
138 get-to[truck-0,city-loc-3] -> m-drive-to-via 150 198
133 get-to[truck-0,city-loc-1] -> m-drive-to-via 138 201
121 get-to[truck-0,city-loc-1] -> m-i-am-there 202
112 load[truck-0,city-loc-0,package-0] -> m-load 122
106 load[truck-0,city-loc-0,package-2] -> m-load 113
93 get-to[truck-0,city-loc-3] -> m-drive-to 94
61 get-to[truck-0,city-loc-2] -> m-drive-to-via 93 100
51 get-to[truck-0,city-loc-0] -> m-drive-to-via 61 156
47 get-to[truck-0,city-loc-0] -> m-i-am-there 102
40 m-deliver_splitted_1[truck-0,package-3] -> _splitting_method_m-deliver_splitted_1 51 158
26 load[truck-0,city-loc-1,package-4] -> m-load 218
22 get-to[truck-0,city-loc-0] -> m-drive-to 101
19 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 22 106
14 get-to[truck-0,city-loc-2] -> m-drive-to 254
9 get-to[truck-0,city-loc-1] -> m-i-am-there 10
6 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 47 112
4 m-deliver_splitted_1[truck-0,package-4] -> _splitting_method_m-deliver_splitted_1 9 26
2 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 14 256
0 __top[] -> <<<<<__top_method;deliver[package-4,city-loc-2];m-deliver;4;0,1,2,3,-1,-2,-3>;deliver[package-3,city-loc-1];m-deliver;3;0,1,2,-1,-2,-3,4,5,6>;deliver[package-2,city-loc-1];m-deliver;2;0,1,-1,-2,-3,3,4,5,6,7,8>;deliver[package-1,city-loc-3];m-deliver;1;0,-1,-2,-3,2,3,4,5,6,7,8,9,10>;deliver[package-0,city-loc-1];m-deliver;0;-1,-2,-3,1,2,3,4,5,6,7,8,9,10,11,12> 6 133 203 2 310 365 19 121 206 40 165 371 4 235 302
<==
