Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport2.sas.
- State has 16 bits divided into 16 mutex groups.
- Domain contains 28 actions.
- Domain contains 45 tasks.
- Domain contains 41 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 42
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
Search Results
- Search time 0.64 seconds
- Visited list time 0.030844 seconds
- Visited list inserts 5532
- Visited list pruned 1657
- Visited list contains 3875
- Visited list hash collisions 1657
- Visited list used hash buckets 3875
- Generated 18367 search nodes
  Calculated heuristic for 14577 nodes
  One modifications 3176
  Effectless actions 614
- including 3176 one modification actions
- including 0 one modification methods
- and       614 progressions of effectless actions
- Generated 22776 nodes per second
- Final fringe contains 1957 nodes
- Status: Solved
- Found solution of length 36
- Total costs of actions: 16
==>
13 noop[truck-0,city-loc-3]
24 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2]
18015 drive[truck-0,city-loc-3,city-loc-1]
18021 drive[truck-0,city-loc-1,city-loc-2]
18022 noop[truck-0,city-loc-2]
18271 pick-up[truck-0,city-loc-2,package-2,capacity-0,capacity-1]
18339 drive[truck-0,city-loc-2,city-loc-1]
18343 drop[truck-0,city-loc-1,package-0,capacity-0,capacity-1]
18344 drive[truck-0,city-loc-1,city-loc-2]
18347 pick-up[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
18355 drive[truck-0,city-loc-2,city-loc-1]
18356 drive[truck-0,city-loc-1,city-loc-3]
18357 drive[truck-0,city-loc-3,city-loc-0]
18358 noop[truck-0,city-loc-0]
18363 drop[truck-0,city-loc-0,package-1,capacity-0,capacity-1]
18364 drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2]
root 0
18362 unload[truck-0,city-loc-0,package-2] -> m-unload 18364
18361 unload[truck-0,city-loc-0,package-1] -> m-unload 18363
18354 get-to[truck-0,city-loc-0] -> m-i-am-there 18358
18338 get-to[truck-0,city-loc-1] -> m-drive-to 18339
18336 get-to[truck-0,city-loc-2] -> m-drive-to-via 18338 18344
18285 get-to[truck-0,city-loc-1] -> m-drive-to-via 18336 18355
18278 get-to[truck-0,city-loc-3] -> m-drive-to-via 18285 18356
18274 get-to[truck-0,city-loc-0] -> m-drive-to-via 18278 18357
18188 load[truck-0,city-loc-2,package-2] -> m-load 18271
18024 load[truck-0,city-loc-2,package-1] -> m-load 18347
18020 unload[truck-0,city-loc-1,package-0] -> m-unload 18343
18014 get-to[truck-0,city-loc-1] -> m-drive-to 18015
23 get-to[truck-0,city-loc-2] -> m-i-am-there 18022
17 load[truck-0,city-loc-3,package-0] -> m-load 24
12 get-to[truck-0,city-loc-3] -> m-i-am-there 13
7 get-to[truck-0,city-loc-2] -> m-drive-to 18021
6 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 7 18024
4 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 23 18188
2 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 12 17
0 __top[] -> <<<__top_method;deliver[package-2,city-loc-0];m-deliver;2;0,1,-1,-2,-3>;deliver[package-1,city-loc-0];m-deliver;1;0,-1,-2,-3,2,3,4>;deliver[package-0,city-loc-1];m-deliver;0;-1,-2,-3,1,2,3,4,5,6> 2 18014 18020 6 18354 18361 4 18274 18362
<==
