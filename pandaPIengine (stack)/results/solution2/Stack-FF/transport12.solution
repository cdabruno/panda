Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport12.sas.
- State has 32 bits divided into 32 mutex groups.
- Domain contains 82 actions.
- Domain contains 129 tasks.
- Domain contains 131 methods.
- The initial state contains 8 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 121
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Stack Search
- Using Stack Algorithm.
Search Results
- Search time 0.002 seconds
- Visited list time 0.000235 seconds
- Visited list inserts 77
- Visited list pruned 15
- Visited list contains 62
- Visited list hash collisions 15
- Visited list used hash buckets 62
- Generated 359 search nodes
  Calculated heuristic for 219 nodes
  One modifications 130
  Effectless actions 10
- including 130 one modification actions
- including 0 one modification methods
- and       10 progressions of effectless actions
- Generated 109500 nodes per second
- Final fringe contains 76 nodes
- Status: Solved
- Found solution of length 65
- Total costs of actions: 28
==>
16 noop[truck-1,city-loc-1]
44 noop[truck-0,city-loc-1]
53 pick-up[truck-0,city-loc-1,package-3,capacity-1,capacity-2]
59 drive[truck-0,city-loc-1,city-loc-3]
60 noop[truck-0,city-loc-3]
68 drop[truck-0,city-loc-3,package-3,capacity-1,capacity-2]
70 pick-up[truck-0,city-loc-3,package-2,capacity-1,capacity-2]
79 drive[truck-0,city-loc-3,city-loc-2]
84 drop[truck-0,city-loc-2,package-2,capacity-1,capacity-2]
85 drive[truck-1,city-loc-1,city-loc-3]
87 pick-up[truck-1,city-loc-3,package-0,capacity-1,capacity-2]
102 drive[truck-1,city-loc-3,city-loc-1]
109 pick-up[truck-1,city-loc-1,package-1,capacity-0,capacity-1]
311 drive[truck-1,city-loc-1,city-loc-4]
312 drive[truck-1,city-loc-4,city-loc-0]
343 drop[truck-1,city-loc-0,package-0,capacity-0,capacity-1]
344 drive[truck-1,city-loc-0,city-loc-4]
345 drive[truck-1,city-loc-4,city-loc-1]
346 drive[truck-1,city-loc-1,city-loc-2]
347 drive[truck-1,city-loc-2,city-loc-1]
348 drive[truck-1,city-loc-1,city-loc-2]
349 drive[truck-1,city-loc-2,city-loc-1]
350 drive[truck-1,city-loc-1,city-loc-2]
351 drive[truck-1,city-loc-2,city-loc-1]
352 drive[truck-1,city-loc-1,city-loc-1]
353 drive[truck-1,city-loc-1,city-loc-1]
354 drive[truck-1,city-loc-1,city-loc-2]
356 drop[truck-1,city-loc-2,package-1,capacity-1,capacity-2]
root 0
355 unload[truck-1,city-loc-2,package-1] -> m-unload 356
319 unload[truck-1,city-loc-0,package-0] -> m-unload 343
310 get-to[truck-1,city-loc-4] -> m-drive-to 344
293 get-to[truck-1,city-loc-1] -> m-drive-to-via 310 345
275 get-to[truck-1,city-loc-2] -> m-drive-to-via 293 346
254 get-to[truck-1,city-loc-1] -> m-drive-to-via 275 347
235 get-to[truck-1,city-loc-2] -> m-drive-to-via 254 348
216 get-to[truck-1,city-loc-1] -> m-drive-to-via 235 349
197 get-to[truck-1,city-loc-2] -> m-drive-to-via 216 350
180 get-to[truck-1,city-loc-1] -> m-drive-to-via 197 351
156 get-to[truck-1,city-loc-1] -> m-drive-to-via 180 352
135 get-to[truck-1,city-loc-1] -> m-drive-to-via 156 353
119 get-to[truck-1,city-loc-2] -> m-drive-to-via 135 354
101 get-to[truck-1,city-loc-1] -> m-drive-to 102
97 get-to[truck-1,city-loc-4] -> m-drive-to-via 101 311
93 get-to[truck-1,city-loc-0] -> m-drive-to-via 97 312
86 load[truck-1,city-loc-3,package-0] -> m-load 87
82 unload[truck-0,city-loc-2,package-2] -> m-unload 84
71 get-to[truck-0,city-loc-2] -> m-drive-to 79
66 unload[truck-0,city-loc-3,package-3] -> m-unload 68
63 load[truck-0,city-loc-3,package-2] -> m-load 70
56 get-to[truck-0,city-loc-3] -> m-i-am-there 60
49 load[truck-0,city-loc-1,package-3] -> m-load 53
43 get-to[truck-0,city-loc-1] -> m-i-am-there 44
35 get-to[truck-1,city-loc-3] -> m-drive-to 85
33 m-deliver_splitted_1[truck-1,package-0] -> _splitting_method_m-deliver_splitted_1 35 86
31 deliver[package-0,city-loc-0] -> m-deliver 33 93 319
26 get-to[truck-0,city-loc-3] -> m-drive-to 59
24 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 26 63
22 load[truck-1,city-loc-1,package-1] -> m-load 109
15 get-to[truck-1,city-loc-1] -> m-i-am-there 16
10 deliver[package-2,city-loc-2] -> m-deliver 24 71 82
8 m-deliver_splitted_1[truck-1,package-1] -> _splitting_method_m-deliver_splitted_1 15 22
6 m-deliver_splitted_1[truck-0,package-3] -> _splitting_method_m-deliver_splitted_1 43 49
3 deliver[package-3,city-loc-3] -> m-deliver 6 56 66
1 deliver[package-1,city-loc-2] -> m-deliver 8 119 355
0 __top[] -> __top_method 31 1 10 3
<==
