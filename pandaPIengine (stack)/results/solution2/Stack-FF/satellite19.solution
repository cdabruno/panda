Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/satellite19.sas.
- State has 23 bits divided into 23 mutex groups.
- Domain contains 104 actions.
- Domain contains 128 tasks.
- Domain contains 260 methods.
- The initial state contains 4 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 128
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Stack Search
- Using Stack Algorithm.
Search Results
- Search time 0.017 seconds
- Visited list time 0.003334 seconds
- Visited list inserts 570
- Visited list pruned 183
- Visited list contains 387
- Visited list hash collisions 183
- Visited list used hash buckets 387
- Generated 1720 search nodes
  Calculated heuristic for 1423 nodes
  One modifications 247
  Effectless actions 50
- including 247 one modification actions
- including 0 one modification methods
- and       50 progressions of effectless actions
- Generated 83705 nodes per second
- Final fringe contains 108 nodes
- Status: Solved
- Found solution of length 29
- Total costs of actions: 16
==>
1566 switch_on[instrument2,satellite1]
1683 switch_on[instrument1,satellite0]
1693 turn_to[satellite1,star1,star4]
1695 turn_to[satellite0,star1,star6]
1698 calibrate[satellite0,instrument1,star1]
1700 turn_to[satellite0,planet3,star1]
1701 take_image[satellite0,planet3,instrument1,spectrograph0]
1702 calibrate[satellite1,instrument2,star1]
1703 turn_to[satellite1,star4,star1]
1704 take_image[satellite1,star4,instrument2,spectrograph0]
1705 turn_to[satellite1,star6,star4]
1707 take_image[satellite1,star6,instrument2,thermograph1]
1708 turn_to[satellite1,planet2,star6]
1712 take_image[satellite1,planet2,instrument2,spectrograph0]
1713 turn_to[satellite1,star5,planet2]
1717 take_image[satellite1,star5,instrument2,spectrograph0]
root 0
1716 method1_splitted_1[satellite1,star5,spectrograph0] -> _splitting_method_method1_splitted_1 1717
1711 method1_splitted_1[satellite1,planet2,spectrograph0] -> _splitting_method_method1_splitted_1 1712
1706 method1_splitted_1[satellite1,star6,thermograph1] -> _splitting_method_method1_splitted_1 1707
1688 auto_calibrate[satellite0,instrument1] -> method6 1695 1698
1571 auto_calibrate[satellite1,instrument2] -> method6 1693 1702
1563 activate_instrument[satellite1,instrument2] -> method5 1566 1571
193 do_observation[star4,spectrograph0] -> method0 1563 1703 1704
134 do_observation[star6,thermograph1] -> method1 1705 1706
91 do_observation[star5,spectrograph0] -> method1 1713 1716
52 do_observation[planet2,spectrograph0] -> method1 1708 1711
43 activate_instrument[satellite0,instrument1] -> method5 1683 1688
40 do_observation[planet3,spectrograph0] -> method0 43 1700 1701
0 __top[] -> __top_method 52 40 193 91 134
<==
