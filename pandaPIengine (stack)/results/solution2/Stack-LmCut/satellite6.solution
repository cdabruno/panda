Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/satellite6.sas.
- State has 15 bits divided into 15 mutex groups.
- Domain contains 24 actions.
- Domain contains 32 tasks.
- Domain contains 38 methods.
- The initial state contains 4 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 32
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Stack Search
- Using Stack Algorithm.
Search Results
- Search time 0.001 seconds
- Visited list time 0.0002 seconds
- Visited list inserts 95
- Visited list pruned 7
- Visited list contains 88
- Visited list hash collisions 7
- Visited list used hash buckets 88
- Generated 457 search nodes
  Calculated heuristic for 268 nodes
  One modifications 163
  Effectless actions 26
- including 163 one modification actions
- including 0 one modification methods
- and       26 progressions of effectless actions
- Generated 268000 nodes per second
- Final fringe contains 9 nodes
- Status: Solved
- Found solution of length 16
- Total costs of actions: 10
==>
422 switch_on[instrument1,satellite1]
430 turn_to[satellite1,GroundStation1,Phenomenon7]
431 switch_on[instrument02,satellite0]
447 turn_to[satellite0,GroundStation0,Phenomenon6]
448 calibrate[satellite1,instrument1,GroundStation1]
451 turn_to[satellite1,Phenomenon4,GroundStation1]
452 take_image[satellite1,Phenomenon4,instrument1,thermograph]
453 calibrate[satellite0,instrument02,GroundStation0]
454 turn_to[satellite0,Star5,GroundStation0]
455 take_image[satellite0,Star5,instrument02,x_ray]
root 0
441 auto_calibrate[satellite0,instrument02] -> method6 447 453
424 auto_calibrate[satellite1,instrument1] -> method6 430 448
421 activate_instrument[satellite0,instrument02] -> method5 431 441
292 do_observation[Phenomenon4,thermograph] -> <method0;activate_instrument[satellite1,instrument1];method5;0;-1,-2,1,2> 422 424 451 452
7 do_observation[Star5,x_ray] -> method0 421 454 455
0 __top[] -> __top_method 292 7
<==
