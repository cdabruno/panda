Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/satellite16.sas.
- State has 11 bits divided into 11 mutex groups.
- Domain contains 43 actions.
- Domain contains 55 tasks.
- Domain contains 92 methods.
- The initial state contains 2 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 55
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Stack Search
- Using Stack Algorithm.
Search Results
- Search time 0.041 seconds
- Visited list time 0.007832 seconds
- Visited list inserts 3432
- Visited list pruned 292
- Visited list contains 3140
- Visited list hash collisions 292
- Visited list used hash buckets 3140
- Generated 14455 search nodes
  Calculated heuristic for 9168 nodes
  One modifications 5213
  Effectless actions 74
- including 5213 one modification actions
- including 0 one modification methods
- and       74 progressions of effectless actions
- Generated 223609 nodes per second
- Final fringe contains 35 nodes
- Status: Solved
- Found solution of length 26
- Total costs of actions: 15
==>
14414 switch_on[instrument1,satellite0]
14423 turn_to[satellite0,groundstation1,star0]
14426 calibrate[satellite0,instrument1,groundstation1]
14427 turn_to[satellite0,planet2,groundstation1]
14431 take_image[satellite0,planet2,instrument1,infrared2]
14433 turn_to[satellite0,planet5,planet2]
14434 take_image[satellite0,planet5,instrument1,infrared2]
14435 switch_off[instrument1,satellite0]
14436 switch_on[instrument0,satellite0]
14440 turn_to[satellite0,star0,planet5]
14445 calibrate[satellite0,instrument0,star0]
14446 turn_to[satellite0,planet3,star0]
14448 take_image[satellite0,planet3,instrument0,infrared2]
14449 turn_to[satellite0,star4,planet3]
14450 take_image[satellite0,star4,instrument0,infrared0]
root 0
14447 method1_splitted_1[satellite0,planet3,infrared2] -> _splitting_method_method1_splitted_1 14448
14439 auto_calibrate[satellite0,instrument0] -> method6 14440 14445
14430 method1_splitted_1[satellite0,planet2,infrared2] -> _splitting_method_method1_splitted_1 14431
14419 auto_calibrate[satellite0,instrument1] -> method6 14423 14426
14402 activate_instrument[satellite0,instrument0] -> method4 14435 14436 14439
14401 activate_instrument[satellite0,instrument1] -> method5 14414 14419
14012 do_observation[star4,infrared0] -> method0 14402 14449 14450
10302 do_observation[planet5,infrared2] -> method0 14401 14433 14434
24 do_observation[planet2,infrared2] -> method1 14427 14430
7 do_observation[planet3,infrared2] -> method1 14446 14447
0 __top[] -> __top_method 24 7 14012 10302
<==
