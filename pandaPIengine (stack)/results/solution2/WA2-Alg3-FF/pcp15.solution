Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/pcp15.sas.
- State has 6 bits divided into 6 mutex groups.
- Domain contains 8 actions.
- Domain contains 11 tasks.
- Domain contains 9 methods.
- The initial state contains 1 set bits.
- The initial task is "__top[]".
- State-based goal contains 1 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 11
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 2
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: path cost
 - weight: 2
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy A* Search with weight 2
- Distance G is "modification depth"
- Starting state heuristic value: 8
Search Results
- Search time 0.001 seconds
- Visited list time 0.000185 seconds
- Visited list inserts 80
- Visited list pruned 0
- Visited list contains 80
- Visited list hash collisions 0
- Visited list used hash buckets 80
- Generated 742 search nodes
  Calculated heuristic for 314 nodes
  One modifications 428
  Effectless actions 0
- including 428 one modification actions
- including 0 one modification methods
- and       0 progressions of effectless actions
- Generated 314000 nodes per second
- Final fringe contains 31 nodes
- Status: Solved
- Found solution of length 33
- Total costs of actions: 24
==>
91 t2G1[]
111 t2G2[]
147 t2G1[]
315 t2G2[]
412 t1G1[]
538 t1G2[]
716 t1G1[]
717 t1G2[]
718 p0G1[]
719 p0G2[]
720 p0G1[]
721 p0G2[]
722 p1G1[]
723 p1G2[]
724 p0G1[]
725 p0G2[]
726 p0G1[]
727 p0G2[]
728 p1G1[]
729 p1G2[]
730 p0G1[]
731 p0G2[]
732 p0G1[]
733 p0G2[]
root 0
715 SG2[] -> G2_S2t1_0 717 719
537 SG1[] -> G1_S2t1_0_0_1 716 718 720 722
411 SG2[] -> G2_S2t1_S_0 538 715 721
314 SG1[] -> G1_S2t1_S_0_0_1 412 537 724 726 728
146 SG2[] -> G2_S2t2_S_1_0_0 315 411 723 725 727
110 SG1[] -> G1_S2t2_S_0 147 314 730
90 SG1[] -> G1_S2t2_S_0 91 110 732
4 SG2[] -> G2_S2t2_S_1_0_0 111 146 729 731 733
0 __top[] -> __top_method 90 4
<==
