Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport13.sas.
- State has 36 bits divided into 36 mutex groups.
- Domain contains 88 actions.
- Domain contains 144 tasks.
- Domain contains 137 methods.
- The initial state contains 9 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 136
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: path cost
 - weight: 2
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy A* Search with weight 2
- Distance G is "modification depth"
Search Results
- Search time 0.003 seconds
- Visited list time 0.000452 seconds
- Visited list inserts 137
- Visited list pruned 4
- Visited list contains 133
- Visited list hash collisions 4
- Visited list used hash buckets 133
- Generated 496 search nodes
  Calculated heuristic for 406 nodes
  One modifications 79
  Effectless actions 11
- including 79 one modification actions
- including 0 one modification methods
- and       11 progressions of effectless actions
- Generated 135333 nodes per second
- Final fringe contains 119 nodes
- Status: Solved
- Found solution of length 63
- Total costs of actions: 26
==>
71 noop[truck-1,city-loc-0]
121 drive[truck-1,city-loc-0,city-loc-2]
122 noop[truck-1,city-loc-2]
216 pick-up[truck-1,city-loc-2,package-1,capacity-1,capacity-2]
221 pick-up[truck-1,city-loc-2,package-2,capacity-0,capacity-1]
315 drive[truck-1,city-loc-2,city-loc-0]
321 drive[truck-1,city-loc-0,city-loc-1]
324 drive[truck-1,city-loc-1,city-loc-4]
325 noop[truck-1,city-loc-4]
338 drop[truck-1,city-loc-4,package-1,capacity-0,capacity-1]
339 pick-up[truck-1,city-loc-4,package-0,capacity-0,capacity-1]
350 drive[truck-1,city-loc-4,city-loc-1]
351 drive[truck-1,city-loc-1,city-loc-0]
362 drop[truck-1,city-loc-0,package-0,capacity-0,capacity-1]
363 pick-up[truck-1,city-loc-0,package-4,capacity-0,capacity-1]
413 drive[truck-1,city-loc-0,city-loc-1]
414 drive[truck-1,city-loc-1,city-loc-4]
436 drop[truck-1,city-loc-4,package-2,capacity-0,capacity-1]
437 drive[truck-1,city-loc-4,city-loc-1]
438 pick-up[truck-1,city-loc-1,package-3,capacity-0,capacity-1]
473 drive[truck-1,city-loc-1,city-loc-4]
488 drop[truck-1,city-loc-4,package-4,capacity-0,capacity-1]
489 drive[truck-1,city-loc-4,city-loc-1]
490 drive[truck-1,city-loc-1,city-loc-0]
491 drive[truck-1,city-loc-0,city-loc-3]
493 drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2]
root 0
492 unload[truck-1,city-loc-3,package-3] -> m-unload 493
484 unload[truck-1,city-loc-4,package-4] -> m-unload 488
472 get-to[truck-1,city-loc-1] -> m-drive-to 489
455 get-to[truck-1,city-loc-0] -> m-drive-to-via 472 490
447 get-to[truck-1,city-loc-3] -> m-drive-to-via 455 491
433 unload[truck-1,city-loc-4,package-2] -> m-unload 436
412 get-to[truck-1,city-loc-1] -> m-drive-to 437
371 get-to[truck-1,city-loc-4] -> m-drive-to-via 412 473
359 unload[truck-1,city-loc-0,package-0] -> m-unload 362
349 get-to[truck-1,city-loc-1] -> m-drive-to 350
346 get-to[truck-1,city-loc-0] -> m-drive-to-via 349 351
337 load[truck-1,city-loc-4,package-0] -> m-load 339
334 unload[truck-1,city-loc-4,package-1] -> m-unload 338
323 load[truck-1,city-loc-1,package-3] -> m-load 438
314 get-to[truck-1,city-loc-0] -> m-drive-to 315
232 get-to[truck-1,city-loc-1] -> m-drive-to-via 314 413
225 get-to[truck-1,city-loc-4] -> m-drive-to-via 232 414
220 get-to[truck-1,city-loc-4] -> m-i-am-there 325
215 load[truck-1,city-loc-2,package-2] -> m-load 221
125 load[truck-1,city-loc-2,package-1] -> m-load 216
115 get-to[truck-1,city-loc-1] -> m-drive-to 321
80 get-to[truck-1,city-loc-2] -> m-i-am-there 122
78 m-deliver_splitted_1[truck-1,package-3] -> _splitting_method_m-deliver_splitted_1 115 323
75 load[truck-1,city-loc-0,package-4] -> m-load 363
70 get-to[truck-1,city-loc-0] -> m-i-am-there 71
36 m-deliver_splitted_1[truck-1,package-4] -> _splitting_method_m-deliver_splitted_1 70 75
27 get-to[truck-1,city-loc-4] -> m-drive-to 324
25 deliver[package-3,city-loc-3] -> m-deliver 78 447 492
20 deliver[package-4,city-loc-4] -> m-deliver 36 371 484
18 m-deliver_splitted_1[truck-1,package-0] -> _splitting_method_m-deliver_splitted_1 27 337
15 deliver[package-0,city-loc-0] -> m-deliver 18 346 359
9 get-to[truck-1,city-loc-2] -> m-drive-to 121
8 m-deliver_splitted_1[truck-1,package-2] -> _splitting_method_m-deliver_splitted_1 9 215
6 m-deliver_splitted_1[truck-1,package-1] -> _splitting_method_m-deliver_splitted_1 80 125
3 deliver[package-2,city-loc-4] -> m-deliver 8 225 433
2 deliver[package-1,city-loc-4] -> m-deliver 6 220 334
0 __top[] -> __top_method 15 2 3 25 20
<==
