Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport2.sas.
- State has 16 bits divided into 16 mutex groups.
- Domain contains 28 actions.
- Domain contains 45 tasks.
- Domain contains 41 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 42
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: path cost
 - weight: 2
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy A* Search with weight 2
- Distance G is "modification depth"
Search Results
- Search time 0.003 seconds
- Visited list time 0.00061 seconds
- Visited list inserts 232
- Visited list pruned 32
- Visited list contains 200
- Visited list hash collisions 32
- Visited list used hash buckets 200
- Generated 811 search nodes
  Calculated heuristic for 663 nodes
  One modifications 135
  Effectless actions 13
- including 135 one modification actions
- including 0 one modification methods
- and       13 progressions of effectless actions
- Generated 221000 nodes per second
- Final fringe contains 111 nodes
- Status: Solved
- Found solution of length 36
- Total costs of actions: 16
==>
13 noop[truck-0,city-loc-3]
24 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2]
648 drive[truck-0,city-loc-3,city-loc-1]
654 drive[truck-0,city-loc-1,city-loc-2]
655 noop[truck-0,city-loc-2]
662 pick-up[truck-0,city-loc-2,package-2,capacity-0,capacity-1]
783 drive[truck-0,city-loc-2,city-loc-1]
787 drop[truck-0,city-loc-1,package-0,capacity-0,capacity-1]
788 drive[truck-0,city-loc-1,city-loc-2]
791 pick-up[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
799 drive[truck-0,city-loc-2,city-loc-1]
800 drive[truck-0,city-loc-1,city-loc-3]
801 drive[truck-0,city-loc-3,city-loc-0]
802 noop[truck-0,city-loc-0]
808 drop[truck-0,city-loc-0,package-2,capacity-0,capacity-1]
809 drop[truck-0,city-loc-0,package-1,capacity-1,capacity-2]
root 0
807 unload[truck-0,city-loc-0,package-2] -> m-unload 808
804 unload[truck-0,city-loc-0,package-1] -> m-unload 809
798 get-to[truck-0,city-loc-0] -> m-i-am-there 802
782 get-to[truck-0,city-loc-1] -> m-drive-to 783
763 get-to[truck-0,city-loc-2] -> m-drive-to-via 782 788
677 get-to[truck-0,city-loc-1] -> m-drive-to-via 763 799
670 get-to[truck-0,city-loc-3] -> m-drive-to-via 677 800
666 get-to[truck-0,city-loc-0] -> m-drive-to-via 670 801
659 load[truck-0,city-loc-2,package-1] -> m-load 791
657 load[truck-0,city-loc-2,package-2] -> m-load 662
653 unload[truck-0,city-loc-1,package-0] -> m-unload 787
647 get-to[truck-0,city-loc-1] -> m-drive-to 648
23 get-to[truck-0,city-loc-2] -> m-i-am-there 655
17 load[truck-0,city-loc-3,package-0] -> m-load 24
12 get-to[truck-0,city-loc-3] -> m-i-am-there 13
7 get-to[truck-0,city-loc-2] -> m-drive-to 654
6 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 7 659
4 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 23 657
2 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 12 17
0 __top[] -> <<<__top_method;deliver[package-2,city-loc-0];m-deliver;2;0,1,-1,-2,-3>;deliver[package-1,city-loc-0];m-deliver;1;0,-1,-2,-3,2,3,4>;deliver[package-0,city-loc-1];m-deliver;0;-1,-2,-3,1,2,3,4,5,6> 2 647 653 6 798 804 4 666 807
<==
