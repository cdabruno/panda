Random seed: 42
Time limit: 2 seconds
Reading input from results/grounded/satellite5.sas.
- State has 14 bits divided into 14 mutex groups.
- Domain contains 26 actions.
- Domain contains 31 tasks.
- Domain contains 41 methods.
- The initial state contains 4 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 31
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time0.002 seconds
- Visited list time 0.000471 seconds
- Visited list inserts 265
- Visited list pruned 36
- Visited list contains 229
- Visited list hash collisions 36
- Visited list used hash buckets 229
- Generated 1337 search nodes
  Calculated heuristic for 760 nodes
  One modifications 491
  Effectless actions 86
- including 491 one modification actions
- including 0 one modification methods
- and       86 progressions of effectless actions
- Generated 380000 nodes per second
- Final fringe contains 28 nodes
- Status: Solved
- Found solution of length 15
- Total costs of actions: 10
==>
1304 switch_on[instrument1,satellite1]
1321 turn_to[satellite1,GroundStation1,Phenomenon7]
1323 calibrate[satellite1,instrument1,GroundStation1]
1325 turn_to[satellite1,Star5,GroundStation1]
1326 take_image[satellite1,Star5,instrument1,thermograph]
1327 switch_on[instrument0,satellite0]
1330 turn_to[satellite0,GroundStation0,Phenomenon6]
1331 calibrate[satellite0,instrument0,GroundStation0]
1332 turn_to[satellite0,Phenomenon4,GroundStation0]
1333 take_image[satellite0,Phenomenon4,instrument0,thermograph]
root 0
1329 auto_calibrate[satellite0,instrument0] -> method6 1330 1331
1309 auto_calibrate[satellite1,instrument1] -> method6 1321 1323
728 do_observation[Star5,thermograph] -> <method0;activate_instrument[satellite1,instrument1];method5;0;-1,-2,1,2> 1304 1309 1325 1326
15 do_observation[Phenomenon4,thermograph] -> <method0;activate_instrument[satellite0,instrument0];method5;0;-1,-2,1,2> 1327 1329 1332 1333
0 __top[] -> __top_method 15 728
<==
