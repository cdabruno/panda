Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/satellite4.sas.
- State has 9 bits divided into 9 mutex groups.
- Domain contains 17 actions.
- Domain contains 24 tasks.
- Domain contains 29 methods.
- The initial state contains 2 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 24
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: path cost
 - weight: 2
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy A* Search with weight 2
- Distance G is "modification depth"
Search Results
- Search time 0.002 seconds
- Visited list time 0.000129 seconds
- Visited list inserts 53
- Visited list pruned 0
- Visited list contains 53
- Visited list hash collisions 0
- Visited list used hash buckets 53
- Generated 231 search nodes
  Calculated heuristic for 154 nodes
  One modifications 74
  Effectless actions 3
- including 74 one modification actions
- including 0 one modification methods
- and       3 progressions of effectless actions
- Generated 77000 nodes per second
- Final fringe contains 8 nodes
- Status: Solved
- Found solution of length 18
- Total costs of actions: 11
==>
198 switch_on[instrument02,satellite0]
213 turn_to[satellite0,GroundStation0,Phenomenon6]
216 calibrate[satellite0,instrument02,GroundStation0]
218 turn_to[satellite0,Star5,GroundStation0]
219 take_image[satellite0,Star5,instrument02,x_ray]
220 switch_off[instrument02,satellite0]
221 switch_on[instrument01,satellite0]
224 turn_to[satellite0,GroundStation0,Star5]
225 calibrate[satellite0,instrument01,GroundStation0]
226 turn_to[satellite0,Phenomenon4,GroundStation0]
227 take_image[satellite0,Phenomenon4,instrument01,thermograph]
root 0
223 auto_calibrate[satellite0,instrument01] -> method6 224 225
202 auto_calibrate[satellite0,instrument02] -> method6 213 216
197 activate_instrument[satellite0,instrument01] -> method4 220 221 223
196 activate_instrument[satellite0,instrument02] -> method5 198 202
36 do_observation[Phenomenon4,thermograph] -> method0 197 226 227
7 do_observation[Star5,x_ray] -> method0 196 218 219
0 __top[] -> __top_method 36 7
<==
