Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/satellite6.sas.
- State has 15 bits divided into 15 mutex groups.
- Domain contains 24 actions.
- Domain contains 32 tasks.
- Domain contains 38 methods.
- The initial state contains 4 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 32
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: path cost
 - weight: 2
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy A* Search with weight 2
- Distance G is "modification depth"
Search Results
- Search time 0.002 seconds
- Visited list time 0.000113 seconds
- Visited list inserts 44
- Visited list pruned 1
- Visited list contains 43
- Visited list hash collisions 1
- Visited list used hash buckets 43
- Generated 232 search nodes
  Calculated heuristic for 156 nodes
  One modifications 71
  Effectless actions 5
- including 71 one modification actions
- including 0 one modification methods
- and       5 progressions of effectless actions
- Generated 78000 nodes per second
- Final fringe contains 16 nodes
- Status: Solved
- Found solution of length 16
- Total costs of actions: 10
==>
194 switch_on[instrument1,satellite1]
201 switch_on[instrument02,satellite0]
220 turn_to[satellite0,GroundStation0,Phenomenon6]
221 turn_to[satellite1,GroundStation1,Phenomenon7]
224 calibrate[satellite1,instrument1,GroundStation1]
226 turn_to[satellite1,Phenomenon4,GroundStation1]
227 take_image[satellite1,Phenomenon4,instrument1,thermograph]
228 calibrate[satellite0,instrument02,GroundStation0]
229 turn_to[satellite0,Star5,GroundStation0]
230 take_image[satellite0,Star5,instrument02,x_ray]
root 0
213 auto_calibrate[satellite0,instrument02] -> method6 220 228
196 auto_calibrate[satellite1,instrument1] -> method6 221 224
193 activate_instrument[satellite0,instrument02] -> method5 201 213
30 do_observation[Phenomenon4,thermograph] -> <method0;activate_instrument[satellite1,instrument1];method5;0;-1,-2,1,2> 194 196 226 227
7 do_observation[Star5,x_ray] -> method0 193 229 230
0 __top[] -> __top_method 30 7
<==
