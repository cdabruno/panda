Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport3.sas.
- State has 15 bits divided into 15 mutex groups.
- Domain contains 28 actions.
- Domain contains 44 tasks.
- Domain contains 42 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 42
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: path cost
 - weight: 2
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy A* Search with weight 2
- Distance G is "modification depth"
Search Results
- Search time 0.005 seconds
- Visited list time 0.000124 seconds
- Visited list inserts 20
- Visited list pruned 0
- Visited list contains 20
- Visited list hash collisions 0
- Visited list used hash buckets 20
- Generated 79 search nodes
  Calculated heuristic for 63 nodes
  One modifications 15
  Effectless actions 1
- including 15 one modification actions
- including 0 one modification methods
- and       1 progressions of effectless actions
- Generated 12600 nodes per second
- Final fringe contains 32 nodes
- Status: Solved
- Found solution of length 28
- Total costs of actions: 12
==>
22 drive[truck-0,city-loc-0,city-loc-1]
33 drive[truck-0,city-loc-1,city-loc-2]
36 drive[truck-0,city-loc-2,city-loc-2]
40 pick-up[truck-0,city-loc-2,package-2,capacity-1,capacity-2]
42 pick-up[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
52 drive[truck-0,city-loc-2,city-loc-1]
61 drop[truck-0,city-loc-1,package-1,capacity-0,capacity-1]
62 pick-up[truck-0,city-loc-1,package-0,capacity-0,capacity-1]
68 drive[truck-0,city-loc-1,city-loc-0]
69 noop[truck-0,city-loc-0]
76 drop[truck-0,city-loc-0,package-2,capacity-0,capacity-1]
77 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2]
root 0
75 unload[truck-0,city-loc-0,package-2] -> m-unload 76
72 unload[truck-0,city-loc-0,package-0] -> m-unload 77
67 get-to[truck-0,city-loc-0] -> m-i-am-there 69
59 unload[truck-0,city-loc-1,package-1] -> m-unload 61
51 get-to[truck-0,city-loc-1] -> m-drive-to 52
41 get-to[truck-0,city-loc-0] -> m-drive-to 68
39 load[truck-0,city-loc-2,package-2] -> m-load 40
35 load[truck-0,city-loc-2,package-1] -> m-load 42
32 load[truck-0,city-loc-1,package-0] -> m-load 62
21 get-to[truck-0,city-loc-2] -> m-drive-to 36
12 get-to[truck-0,city-loc-1] -> m-drive-to 22
7 get-to[truck-0,city-loc-2] -> m-drive-to 33
6 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 7 35
4 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 21 39
2 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 12 32
0 __top[] -> <<<__top_method;deliver[package-2,city-loc-0];m-deliver;2;0,1,-1,-2,-3>;deliver[package-1,city-loc-1];m-deliver;1;0,-1,-2,-3,2,3,4>;deliver[package-0,city-loc-0];m-deliver;0;-1,-2,-3,1,2,3,4,5,6> 2 67 72 6 51 59 4 41 75
<==
