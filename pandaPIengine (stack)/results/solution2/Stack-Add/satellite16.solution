Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/satellite16.sas.
- State has 11 bits divided into 11 mutex groups.
- Domain contains 43 actions.
- Domain contains 55 tasks.
- Domain contains 92 methods.
- The initial state contains 2 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 55
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Stack Search
- Using Stack Algorithm.
Search Results
- Search time 0.004 seconds
- Visited list time 3.1e-05 seconds
- Visited list inserts 10
- Visited list pruned 0
- Visited list contains 10
- Visited list hash collisions 0
- Visited list used hash buckets 10
- Generated 97 search nodes
  Calculated heuristic for 83 nodes
  One modifications 9
  Effectless actions 5
- including 9 one modification actions
- including 0 one modification methods
- and       5 progressions of effectless actions
- Generated 20750 nodes per second
- Final fringe contains 35 nodes
- Status: Solved
- Found solution of length 19
- Total costs of actions: 10
==>
73 switch_on[instrument0,satellite0]
80 calibrate[satellite0,instrument0,star0]
81 turn_to[satellite0,planet5,star0]
82 take_image[satellite0,planet5,instrument0,infrared2]
83 turn_to[satellite0,planet3,planet5]
85 take_image[satellite0,planet3,instrument0,infrared2]
86 turn_to[satellite0,star4,planet3]
87 take_image[satellite0,star4,instrument0,infrared0]
88 turn_to[satellite0,planet2,star4]
94 take_image[satellite0,planet2,instrument0,infrared2]
root 0
93 method1_splitted_1[satellite0,planet2,infrared2] -> _splitting_method_method1_splitted_1 94
84 method1_splitted_1[satellite0,planet3,infrared2] -> _splitting_method_method1_splitted_1 85
79 auto_calibrate[satellite0,instrument0] -> method7 80
72 activate_instrument[satellite0,instrument0] -> method5 73 79
68 do_observation[planet5,infrared2] -> method0 72 81 82
42 do_observation[star4,infrared0] -> <method1;method1_splitted_1[satellite0,star4,infrared0];_splitting_method_method1_splitted_1;1;0,-1> 86 87
25 do_observation[planet2,infrared2] -> method1 88 93
4 do_observation[planet3,infrared2] -> method1 83 84
0 __top[] -> __top_method 25 4 42 68
<==
