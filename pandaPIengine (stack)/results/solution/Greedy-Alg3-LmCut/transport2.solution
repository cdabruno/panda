Random seed: 42
Time limit: 15 seconds
Reading input from results/grounded/transport2.sas.
- State has 16 bits divided into 16 mutex groups.
- Domain contains 28 actions.
- Domain contains 45 tasks.
- Domain contains 41 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 42
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Greedy Search
Search Results
- Search time 0.008 seconds
- Visited list time 0.000255 seconds
- Visited list inserts 94
- Visited list pruned 19
- Visited list contains 75
- Visited list hash collisions 0
- Generated 339 search nodes
  Calculated heuristic for 240 nodes
  One modifications 89
  Effectless actions 10
- including 89 one modification actions
- including 0 one modification methods
- and       10 progressions of effectless actions
- Generated 30000 nodes per second
- Final fringe contains 48 nodes
- Status: Solved
- Found solution of length 36
- Total costs of actions: 16
==>
13 noop[truck-0,city-loc-3]
24 pick-up[truck-0,city-loc-3,package-0,capacity-1,capacity-2]
27 drive[truck-0,city-loc-3,city-loc-1]
33 drive[truck-0,city-loc-1,city-loc-2]
34 noop[truck-0,city-loc-2]
238 pick-up[truck-0,city-loc-2,package-2,capacity-0,capacity-1]
311 drive[truck-0,city-loc-2,city-loc-1]
315 drop[truck-0,city-loc-1,package-0,capacity-0,capacity-1]
316 drive[truck-0,city-loc-1,city-loc-2]
319 pick-up[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
327 drive[truck-0,city-loc-2,city-loc-1]
328 drive[truck-0,city-loc-1,city-loc-3]
329 drive[truck-0,city-loc-3,city-loc-0]
330 noop[truck-0,city-loc-0]
335 drop[truck-0,city-loc-0,package-1,capacity-0,capacity-1]
336 drop[truck-0,city-loc-0,package-2,capacity-1,capacity-2]
root 0
334 unload[truck-0,city-loc-0,package-2] -> m-unload 336
333 unload[truck-0,city-loc-0,package-1] -> m-unload 335
326 get-to[truck-0,city-loc-0] -> m-i-am-there 330
310 get-to[truck-0,city-loc-1] -> m-drive-to 311
308 get-to[truck-0,city-loc-2] -> m-drive-to-via 310 316
277 get-to[truck-0,city-loc-1] -> m-drive-to-via 308 327
270 get-to[truck-0,city-loc-3] -> m-drive-to-via 277 328
266 get-to[truck-0,city-loc-0] -> m-drive-to-via 270 329
155 load[truck-0,city-loc-2,package-2] -> m-load 238
36 load[truck-0,city-loc-2,package-1] -> m-load 319
32 unload[truck-0,city-loc-1,package-0] -> m-unload 315
26 get-to[truck-0,city-loc-1] -> m-drive-to 27
23 get-to[truck-0,city-loc-2] -> m-i-am-there 34
17 load[truck-0,city-loc-3,package-0] -> m-load 24
12 get-to[truck-0,city-loc-3] -> m-i-am-there 13
9 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 23 36
5 get-to[truck-0,city-loc-2] -> m-drive-to 33
4 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 5 155
2 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 12 17
0 __top[] -> <<<__top_method;deliver[package-2,city-loc-0];m-deliver;2;0,1,-1,-2,-3>;deliver[package-1,city-loc-0];m-deliver;1;0,-1,-2,-3,2,3,4>;deliver[package-0,city-loc-1];m-deliver;0;-1,-2,-3,1,2,3,4,5,6> 2 26 32 9 326 333 4 266 334
<==
