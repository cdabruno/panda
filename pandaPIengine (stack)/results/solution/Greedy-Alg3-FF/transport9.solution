Random seed: 42
Time limit: 15 seconds
Reading input from results/grounded/transport9.sas.
- State has 28 bits divided into 28 mutex groups.
- Domain contains 71 actions.
- Domain contains 103 tasks.
- Domain contains 91 methods.
- The initial state contains 9 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 101
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (1 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Greedy Search
Search Results
- Search time 0.003 seconds
- Visited list time 0.000266 seconds
- Visited list inserts 56
- Visited list pruned 0
- Visited list contains 56
- Visited list hash collisions 0
- Generated 195 search nodes
  Calculated heuristic for 167 nodes
  One modifications 19
  Effectless actions 9
- including 19 one modification actions
- including 0 one modification methods
- and       9 progressions of effectless actions
- Generated 55666 nodes per second
- Final fringe contains 90 nodes
- Status: Solved
- Found solution of length 66
- Total costs of actions: 29
==>
34 noop[truck-0,city-loc-4]
45 noop[truck-0,city-loc-4]
68 drive[truck-0,city-loc-4,city-loc-1]
69 noop[truck-0,city-loc-1]
70 noop[truck-0,city-loc-1]
79 pick-up[truck-0,city-loc-1,package-4,capacity-2,capacity-3]
85 pick-up[truck-0,city-loc-1,package-6,capacity-1,capacity-2]
88 drive[truck-0,city-loc-1,city-loc-4]
98 pick-up[truck-0,city-loc-4,package-0,capacity-0,capacity-1]
106 drop[truck-0,city-loc-4,package-6,capacity-0,capacity-1]
108 drive[truck-0,city-loc-4,city-loc-2]
109 noop[truck-0,city-loc-2]
118 drop[truck-0,city-loc-2,package-4,capacity-1,capacity-2]
119 drive[truck-0,city-loc-2,city-loc-4]
123 pick-up[truck-0,city-loc-4,package-1,capacity-1,capacity-2]
130 drive[truck-0,city-loc-4,city-loc-1]
138 drop[truck-0,city-loc-1,package-0,capacity-1,capacity-2]
139 pick-up[truck-0,city-loc-1,package-2,capacity-1,capacity-2]
142 drive[truck-0,city-loc-1,city-loc-4]
157 drop[truck-0,city-loc-4,package-2,capacity-1,capacity-2]
159 drive[truck-0,city-loc-4,city-loc-2]
163 drop[truck-0,city-loc-2,package-1,capacity-2,capacity-3]
164 pick-up[truck-0,city-loc-2,package-3,capacity-2,capacity-3]
172 drive[truck-0,city-loc-2,city-loc-4]
176 pick-up[truck-0,city-loc-4,package-5,capacity-1,capacity-2]
182 drive[truck-0,city-loc-4,city-loc-1]
183 noop[truck-0,city-loc-1]
191 drop[truck-0,city-loc-1,package-3,capacity-1,capacity-2]
192 drop[truck-0,city-loc-1,package-5,capacity-2,capacity-3]
root 0
190 unload[truck-0,city-loc-1,package-3] -> m-unload 191
187 unload[truck-0,city-loc-1,package-5] -> m-unload 192
181 get-to[truck-0,city-loc-1] -> m-i-am-there 183
171 get-to[truck-0,city-loc-4] -> m-drive-to 172
169 get-to[truck-0,city-loc-1] -> m-drive-to-via 171 182
162 unload[truck-0,city-loc-2,package-1] -> m-unload 163
149 unload[truck-0,city-loc-4,package-2] -> m-unload 157
141 get-to[truck-0,city-loc-4] -> m-drive-to 142
137 unload[truck-0,city-loc-1,package-0] -> m-unload 138
126 get-to[truck-0,city-loc-2] -> m-drive-to 159
122 load[truck-0,city-loc-4,package-5] -> m-load 176
115 load[truck-0,city-loc-2,package-3] -> m-load 164
112 unload[truck-0,city-loc-2,package-4] -> m-unload 118
99 get-to[truck-0,city-loc-1] -> m-drive-to 130
93 unload[truck-0,city-loc-4,package-6] -> m-unload 106
87 get-to[truck-0,city-loc-4] -> m-drive-to 88
83 get-to[truck-0,city-loc-2] -> m-i-am-there 109
78 load[truck-0,city-loc-1,package-2] -> m-load 139
76 load[truck-0,city-loc-1,package-6] -> m-load 85
72 load[truck-0,city-loc-1,package-4] -> m-load 79
64 get-to[truck-0,city-loc-1] -> m-i-am-there 70
59 get-to[truck-0,city-loc-1] -> m-i-am-there 69
56 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 59 78
53 load[truck-0,city-loc-4,package-1] -> m-load 123
48 m-deliver_splitted_1[truck-0,package-6] -> _splitting_method_m-deliver_splitted_1 64 76
44 get-to[truck-0,city-loc-4] -> m-i-am-there 45
39 load[truck-0,city-loc-4,package-0] -> m-load 98
33 get-to[truck-0,city-loc-4] -> m-i-am-there 34
26 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 44 53
18 get-to[truck-0,city-loc-4] -> m-drive-to 119
12 get-to[truck-0,city-loc-1] -> m-drive-to 68
9 get-to[truck-0,city-loc-2] -> m-drive-to 108
8 m-deliver_splitted_1[truck-0,package-5] -> _splitting_method_m-deliver_splitted_1 18 122
6 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 33 39
3 m-deliver_splitted_1[truck-0,package-3] -> _splitting_method_m-deliver_splitted_1 9 115
1 m-deliver_splitted_1[truck-0,package-4] -> _splitting_method_m-deliver_splitted_1 12 72
0 __top[] -> <<<<<<<__top_method;deliver[package-6,city-loc-4];m-deliver;6;0,1,2,3,4,5,-1,-2,-3>;deliver[package-5,city-loc-1];m-deliver;5;0,1,2,3,4,-1,-2,-3,6,7,8>;deliver[package-4,city-loc-2];m-deliver;4;0,1,2,3,-1,-2,-3,5,6,7,8,9,10>;deliver[package-3,city-loc-1];m-deliver;3;0,1,2,-1,-2,-3,4,5,6,7,8,9,10,11,12>;deliver[package-2,city-loc-4];m-deliver;2;0,1,-1,-2,-3,3,4,5,6,7,8,9,10,11,12,13,14>;deliver[package-1,city-loc-2];m-deliver;1;0,-1,-2,-3,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16>;deliver[package-0,city-loc-1];m-deliver;0;-1,-2,-3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18> 6 99 137 26 126 162 56 141 149 3 169 190 1 83 112 8 181 187 48 87 93
<==
