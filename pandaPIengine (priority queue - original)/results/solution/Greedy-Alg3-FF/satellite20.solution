Random seed: 42
Time limit: 15 seconds
Reading input from results/grounded/satellite20.sas.
- State has 37 bits divided into 37 mutex groups.
- Domain contains 123 actions.
- Domain contains 139 tasks.
- Domain contains 202 methods.
- The initial state contains 8 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 139
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Greedy Search
Search Results
- Search time 0.047 seconds
- Visited list time 0.007428 seconds
- Visited list inserts 1564
- Visited list pruned 492
- Visited list contains 1072
- Visited list hash collisions 0
- Generated 7403 search nodes
  Calculated heuristic for 4970 nodes
  One modifications 1931
  Effectless actions 502
- including 1931 one modification actions
- including 0 one modification methods
- and       502 progressions of effectless actions
- Generated 105744 nodes per second
- Final fringe contains 2712 nodes
- Status: Solved
- Found solution of length 25
- Total costs of actions: 16
==>
7339 switch_on[instrument2,satellite1]
7349 switch_on[instrument3,satellite2]
7378 turn_to[satellite2,groundstation0,planet6]
7385 calibrate[satellite2,instrument3,groundstation0]
7386 turn_to[satellite2,phenomenon3,groundstation0]
7387 take_image[satellite2,phenomenon3,instrument3,image1]
7390 turn_to[satellite2,planet2,phenomenon3]
7391 take_image[satellite2,planet2,instrument3,infrared2]
7392 turn_to[satellite2,planet4,planet2]
7393 take_image[satellite2,planet4,instrument3,infrared2]
7395 turn_to[satellite2,phenomenon5,planet4]
7396 take_image[satellite2,phenomenon5,instrument3,image4]
7397 turn_to[satellite1,star1,phenomenon5]
7398 calibrate[satellite1,instrument2,star1]
7399 turn_to[satellite1,planet6,star1]
7400 take_image[satellite1,planet6,instrument2,spectrograph0]
root 0
7371 auto_calibrate[satellite2,instrument3] -> method6 7378 7385
7342 auto_calibrate[satellite1,instrument2] -> method6 7397 7398
7337 activate_instrument[satellite1,instrument2] -> method5 7339 7342
7177 do_observation[planet6,spectrograph0] -> method0 7337 7399 7400
7014 do_observation[phenomenon5,image4] -> <method1;method1_splitted_1[satellite2,phenomenon5,image4];_splitting_method_method1_splitted_1;1;0,-1> 7395 7396
108 do_observation[planet2,infrared2] -> <method0;activate_instrument[satellite2,instrument3];method5;0;-1,-2,1,2> 7349 7371 7390 7391
51 do_observation[planet4,infrared2] -> <method1;method1_splitted_1[satellite2,planet4,infrared2];_splitting_method_method1_splitted_1;1;0,-1> 7392 7393
13 do_observation[phenomenon3,image1] -> <method1;method1_splitted_1[satellite2,phenomenon3,image1];_splitting_method_method1_splitted_1;1;0,-1> 7386 7387
0 __top[] -> __top_method 108 13 51 7014 7177
<==
