Random seed: 42
Time limit: 15 seconds
Reading input from results/grounded/satellite16.sas.
- State has 11 bits divided into 11 mutex groups.
- Domain contains 43 actions.
- Domain contains 55 tasks.
- Domain contains 92 methods.
- The initial state contains 2 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 55
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (1 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Greedy Search
Search Results
- Search time 0.002 seconds
- Visited list time 0.000201 seconds
- Visited list inserts 45
- Visited list pruned 2
- Visited list contains 43
- Visited list hash collisions 0
- Generated 260 search nodes
  Calculated heuristic for 165 nodes
  One modifications 82
  Effectless actions 13
- including 82 one modification actions
- including 0 one modification methods
- and       13 progressions of effectless actions
- Generated 82500 nodes per second
- Final fringe contains 114 nodes
- Status: Solved
- Found solution of length 19
- Total costs of actions: 10
==>
218 switch_on[instrument0,satellite0]
241 calibrate[satellite0,instrument0,star0]
242 turn_to[satellite0,planet2,star0]
244 take_image[satellite0,planet2,instrument0,infrared2]
245 turn_to[satellite0,star4,planet2]
246 take_image[satellite0,star4,instrument0,infrared0]
247 turn_to[satellite0,planet3,star4]
253 take_image[satellite0,planet3,instrument0,infrared2]
254 turn_to[satellite0,planet5,planet3]
255 take_image[satellite0,planet5,instrument0,infrared2]
root 0
252 method1_splitted_1[satellite0,planet3,infrared2] -> _splitting_method_method1_splitted_1 253
243 method1_splitted_1[satellite0,planet2,infrared2] -> _splitting_method_method1_splitted_1 244
229 auto_calibrate[satellite0,instrument0] -> method7 241
216 activate_instrument[satellite0,instrument0] -> method5 218 229
71 do_observation[planet5,infrared2] -> method0 216 254 255
40 do_observation[star4,infrared0] -> <method1;method1_splitted_1[satellite0,star4,infrared0];_splitting_method_method1_splitted_1;1;0,-1> 245 246
26 do_observation[planet2,infrared2] -> method1 242 243
6 do_observation[planet3,infrared2] -> method1 247 252
0 __top[] -> __top_method 26 6 40 71
<==
