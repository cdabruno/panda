Random seed: 42
Time limit: 15 seconds
Reading input from results/grounded/satellite24.sas.
- State has 16 bits divided into 16 mutex groups.
- Domain contains 24 actions.
- Domain contains 36 tasks.
- Domain contains 45 methods.
- The initial state contains 4 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 36
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: cost optimal
 - weight: 2
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Greedy A* Search with weight 2
- Distance G is "modification depth"
Search Results
- Search time 0.002 seconds
- Visited list time 4.8e-05 seconds
- Visited list inserts 17
- Visited list pruned 0
- Visited list contains 17
- Visited list hash collisions 0
- Generated 78 search nodes
  Calculated heuristic for 56 nodes
  One modifications 21
  Effectless actions 1
- including 21 one modification actions
- including 0 one modification methods
- and       1 progressions of effectless actions
- Generated 28000 nodes per second
- Final fringe contains 6 nodes
- Status: Solved
- Found solution of length 9
- Total costs of actions: 5
==>
69 switch_on[instrument0_1,satellite0]
71 turn_to[satellite0,GroundStation2,Phenomenon6]
72 calibrate[satellite0,instrument0_1,GroundStation2]
73 turn_to[satellite0,Phenomenon4,GroundStation2]
74 take_image[satellite0,Phenomenon4,instrument0_1,thermograph0]
root 0
70 auto_calibrate[satellite0,instrument0_1] -> method6 71 72
68 activate_instrument[satellite0,instrument0_1] -> method5 69 70
21 do_observation[Phenomenon4,thermograph0] -> method0 68 73 74
0 __top[] -> __top_method 21
<==
