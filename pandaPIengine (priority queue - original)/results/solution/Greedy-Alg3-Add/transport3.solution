Random seed: 42
Time limit: 15 seconds
Reading input from results/grounded/transport3.sas.
- State has 15 bits divided into 15 mutex groups.
- Domain contains 28 actions.
- Domain contains 44 tasks.
- Domain contains 42 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 42
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Greedy Search
Search Results
- Search time 0.908 seconds
- Visited list time 0.268201 seconds
- Visited list inserts 82629
- Visited list pruned 36419
- Visited list contains 46210
- Visited list hash collisions 0
- Generated 297341 search nodes
  Calculated heuristic for 196230 nodes
  One modifications 89396
  Effectless actions 11715
- including 89396 one modification actions
- including 0 one modification methods
- and       11715 progressions of effectless actions
- Generated 216112 nodes per second
- Final fringe contains 47345 nodes
- Status: Solved
- Found solution of length 30
- Total costs of actions: 13
==>
20 drive[truck-0,city-loc-0,city-loc-1]
31 pick-up[truck-0,city-loc-1,package-0,capacity-1,capacity-2]
41 drive[truck-0,city-loc-1,city-loc-2]
212576 pick-up[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
297305 drive[truck-0,city-loc-2,city-loc-1]
297314 drop[truck-0,city-loc-1,package-1,capacity-0,capacity-1]
297315 drive[truck-0,city-loc-1,city-loc-2]
297317 pick-up[truck-0,city-loc-2,package-2,capacity-0,capacity-1]
297327 drive[truck-0,city-loc-2,city-loc-1]
297328 drive[truck-0,city-loc-1,city-loc-0]
297329 noop[truck-0,city-loc-0]
297337 drop[truck-0,city-loc-0,package-2,capacity-0,capacity-1]
297338 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2]
root 0
297336 unload[truck-0,city-loc-0,package-0] -> m-unload 297338
297335 unload[truck-0,city-loc-0,package-2] -> m-unload 297337
297326 get-to[truck-0,city-loc-1] -> m-drive-to 297327
297322 get-to[truck-0,city-loc-0] -> m-drive-to-via 297326 297328
297316 load[truck-0,city-loc-2,package-2] -> m-load 297317
297312 unload[truck-0,city-loc-1,package-1] -> m-unload 297314
297304 get-to[truck-0,city-loc-1] -> m-drive-to 297305
212575 load[truck-0,city-loc-2,package-1] -> m-load 212576
34 get-to[truck-0,city-loc-0] -> m-i-am-there 297329
28 load[truck-0,city-loc-1,package-0] -> m-load 31
19 get-to[truck-0,city-loc-2] -> m-drive-to 41
12 get-to[truck-0,city-loc-1] -> m-drive-to 20
11 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 19 212575
5 get-to[truck-0,city-loc-2] -> m-drive-to 297315
4 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 5 297316
2 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 12 28
0 __top[] -> <<<__top_method;deliver[package-2,city-loc-0];m-deliver;2;0,1,-1,-2,-3>;deliver[package-1,city-loc-1];m-deliver;1;0,-1,-2,-3,2,3,4>;deliver[package-0,city-loc-0];m-deliver;0;-1,-2,-3,1,2,3,4,5,6> 2 34 297336 11 297304 297312 4 297322 297335
<==
