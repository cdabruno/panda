/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "pandaPIparser"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "pandaPIparser"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  int debug_arg;	/**< @brief activate debug mode and set the debug level (default='1').  */
  char * debug_orig;	/**< @brief activate debug mode and set the debug level original value given at command line.  */
  const char *debug_help; /**< @brief activate debug mode and set the debug level help description.  */
  int no_colour_flag;	/**< @brief activate the no-colour mode, i.e. disable coloured output (default=off).  */
  const char *no_colour_help; /**< @brief activate the no-colour mode, i.e. disable coloured output help description.  */
  int properties_flag;	/**< @brief only show the instances properties and exit (default=off).  */
  const char *properties_help; /**< @brief only show the instances properties and exit help description.  */
  int no_split_parameters_flag;	/**< @brief don't perform parameter splitting. Parameter splitting re-formulates methods in a way s.t. they have fewer groundings (default=off).  */
  const char *no_split_parameters_help; /**< @brief don't perform parameter splitting. Parameter splitting re-formulates methods in a way s.t. they have fewer groundings help description.  */
  const char *keep_conditional_effects_help; /**< @brief don't compile conditional effects into multiple actions. This compilation is active by default, but will lead to an exponential amount of actions in the number of conditional effects per actions. If it is turned off the conditional effects are written directly as-is to the output. The pandaPIgrounder can handle this, but not all planners might. help description.  */
  const char *linear_conditional_effect_help; /**< @brief use a linear size encoding of conditional effects (by using the HTN structure). This has generally not a good performance in the planner help description.  */
  const char *exponential_conditional_effect_help; /**< @brief use the standard exponential encoding of conditional effects help description.  */
  int encode_disjunctive_preconditions_in_htn_flag;	/**< @brief don't compile disjunctive preconditions into one action per element of the disjunction, but use the HTN structure instead (default=off).  */
  const char *encode_disjunctive_preconditions_in_htn_help; /**< @brief don't compile disjunctive preconditions into one action per element of the disjunction, but use the HTN structure instead help description.  */
  int goal_action_flag;	/**< @brief compile the state goal into an action (default=off).  */
  const char *goal_action_help; /**< @brief compile the state goal into an action help description.  */
  int remove_method_preconditions_flag;	/**< @brief remove all methods preconditions from the model (this alters the semantics of the model) (default=off).  */
  const char *remove_method_preconditions_help; /**< @brief remove all methods preconditions from the model (this alters the semantics of the model) help description.  */
  const char *shop_help; /**< @brief output in SHOP2 format help description.  */
  const char *shop1_help; /**< @brief output in SHOP1 format help description.  */
  const char *hpdl_help; /**< @brief output in HPDL format (for SIADEX) help description.  */
  const char *hppdl_help; /**< @brief output in HPPDL format (Ron Alford's format) help description.  */
  const char *hddl_help; /**< @brief output in HDDL format as is, i.e. without any transformations applied (even if they are activated). help description.  */
  const char *processed_hddl_help; /**< @brief output in processed HDDL, i.e. with transformations applied. help description.  */
  const char *internal_hddl_help; /**< @brief output in processed HDDL, i.e. with transformations applied. This output will not try to conform with HDDL standards w.r.t. to action/task/method/predicate/object names, i.e. they may start with underscores or contain other illegal characters like ';' or '|'. This output is intended for debuggig. help description.  */
  int verify_arg;	/**< @brief activates the verifier (default='0').  */
  char * verify_orig;	/**< @brief activates the verifier original value given at command line.  */
  const char *verify_help; /**< @brief activates the verifier help description.  */
  int vverify_flag;	/**< @brief activates the verifier with verbose output (i.e. verbosity level 1) (default=off).  */
  const char *vverify_help; /**< @brief activates the verifier with verbose output (i.e. verbosity level 1) help description.  */
  int vvverify_flag;	/**< @brief activates the verifier with very verbose output (i.e. verbosity level 2) (default=off).  */
  const char *vvverify_help; /**< @brief activates the verifier with very verbose output (i.e. verbosity level 2) help description.  */
  int lenient_flag;	/**< @brief switches the verifier to lenient mode. It will ignore difference is case and allow for all non letter characters in action, task, and method names to be replaced by underscores (default=off).  */
  const char *lenient_help; /**< @brief switches the verifier to lenient mode. It will ignore difference is case and allow for all non letter characters in action, task, and method names to be replaced by underscores help description.  */
  int verify_no_order_flag;	/**< @brief ignore the order of subtasks given in the plan (default=off).  */
  const char *verify_no_order_help; /**< @brief ignore the order of subtasks given in the plan help description.  */
  int panda_converter_flag;	/**< @brief activates the pandaPI plan converter. Both the grounder and the parser may alter the planning problem s.t. the plan found by the engine might not be verifiable any more. With the converter, one can translate the found plan back into a verifiable plan. Run with two arguments: plan.in plan.out (default=off).  */
  const char *panda_converter_help; /**< @brief activates the pandaPI plan converter. Both the grounder and the parser may alter the planning problem s.t. the plan found by the engine might not be verifiable any more. With the converter, one can translate the found plan back into a verifiable plan. Run with two arguments: plan.in plan.out help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int debug_given ;	/**< @brief Whether debug was given.  */
  unsigned int no_colour_given ;	/**< @brief Whether no-colour was given.  */
  unsigned int properties_given ;	/**< @brief Whether properties was given.  */
  unsigned int no_split_parameters_given ;	/**< @brief Whether no-split-parameters was given.  */
  unsigned int keep_conditional_effects_given ;	/**< @brief Whether keep-conditional-effects was given.  */
  unsigned int linear_conditional_effect_given ;	/**< @brief Whether linear-conditional-effect was given.  */
  unsigned int exponential_conditional_effect_given ;	/**< @brief Whether exponential-conditional-effect was given.  */
  unsigned int encode_disjunctive_preconditions_in_htn_given ;	/**< @brief Whether encode-disjunctive-preconditions-in-htn was given.  */
  unsigned int goal_action_given ;	/**< @brief Whether goal-action was given.  */
  unsigned int remove_method_preconditions_given ;	/**< @brief Whether remove-method-preconditions was given.  */
  unsigned int shop_given ;	/**< @brief Whether shop was given.  */
  unsigned int shop1_given ;	/**< @brief Whether shop1 was given.  */
  unsigned int hpdl_given ;	/**< @brief Whether hpdl was given.  */
  unsigned int hppdl_given ;	/**< @brief Whether hppdl was given.  */
  unsigned int hddl_given ;	/**< @brief Whether hddl was given.  */
  unsigned int processed_hddl_given ;	/**< @brief Whether processed-hddl was given.  */
  unsigned int internal_hddl_given ;	/**< @brief Whether internal-hddl was given.  */
  unsigned int verify_given ;	/**< @brief Whether verify was given.  */
  unsigned int vverify_given ;	/**< @brief Whether vverify was given.  */
  unsigned int vvverify_given ;	/**< @brief Whether vvverify was given.  */
  unsigned int lenient_given ;	/**< @brief Whether lenient was given.  */
  unsigned int verify_no_order_given ;	/**< @brief Whether verify-no-order was given.  */
  unsigned int panda_converter_given ;	/**< @brief Whether panda-converter was given.  */

  char **inputs ; /**< @brief unnamed options (options without names) */
  unsigned inputs_num ; /**< @brief unnamed options number */
  int conditionalEffects_group_counter; /**< @brief Counter for group conditionalEffects */
  int output_group_counter; /**< @brief Counter for group output */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * The string parser (interprets the passed string as a command line)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_string (const char *cmdline, struct gengetopt_args_info *args_info,
  const char *prog_name);
/**
 * The string parser (version with additional parameters - deprecated)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_string_ext() instead
 */
int cmdline_parser_string2 (const char *cmdline, struct gengetopt_args_info *args_info,
  const char *prog_name,
  int override, int initialize, int check_required);
/**
 * The string parser (version with additional parameters)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_string_ext (const char *cmdline, struct gengetopt_args_info *args_info,
  const char *prog_name,
  struct cmdline_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern const char *cmdline_parser_verify_values[];  /**< @brief Possible values for verify. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
