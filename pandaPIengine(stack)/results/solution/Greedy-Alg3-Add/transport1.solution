Random seed: 42
Time limit: 15 seconds
Reading input from results/grounded/transport1.sas.
- State has 11 bits divided into 11 mutex groups.
- Domain contains 13 actions.
- Domain contains 19 tasks.
- Domain contains 16 methods.
- The initial state contains 4 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 17
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Greedy Search
Search Results
- Search time 0.001 seconds
- Visited list time 0.00021 seconds
- Visited list inserts 79
- Visited list pruned 3
- Visited list contains 76
- Visited list hash collisions 0
- Generated 654 search nodes
  Calculated heuristic for 274 nodes
  One modifications 353
  Effectless actions 27
- including 353 one modification actions
- including 0 one modification methods
- and       27 progressions of effectless actions
- Generated 274000 nodes per second
- Final fringe contains 45 nodes
- Status: Solved
- Found solution of length 15
- Total costs of actions: 8
==>
636 drive[truck-0,city-loc-2,city-loc-1]
637 pick-up[truck-0,city-loc-1,package-1,capacity-0,capacity-1]
641 drive[truck-0,city-loc-1,city-loc-2]
645 drop[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
646 drive[truck-0,city-loc-2,city-loc-1]
647 pick-up[truck-0,city-loc-1,package-0,capacity-0,capacity-1]
649 drive[truck-0,city-loc-1,city-loc-0]
650 drop[truck-0,city-loc-0,package-0,capacity-0,capacity-1]
root 0
648 get-to[truck-0,city-loc-0] -> m-drive-to 649
640 get-to[truck-0,city-loc-2] -> m-drive-to 641
10 get-to[truck-0,city-loc-1] -> m-drive-to 646
8 m-deliver_splitted_1[truck-0,package-0] -> <_splitting_method_m-deliver_splitted_1;load[truck-0,city-loc-1,package-0];m-load;1;0,-1> 10 647
3 get-to[truck-0,city-loc-1] -> m-drive-to 636
1 m-deliver_splitted_1[truck-0,package-1] -> <_splitting_method_m-deliver_splitted_1;load[truck-0,city-loc-1,package-1];m-load;1;0,-1> 3 637
0 __top[] -> <<<<__top_method;deliver[package-1,city-loc-2];m-deliver;1;0,-1,-2,-3>;unload[truck-0,city-loc-2,package-1];m-unload;3;0,1,2,-1>;deliver[package-0,city-loc-0];m-deliver;0;-1,-2,-3,1,2,3>;unload[truck-0,city-loc-0,package-0];m-unload;2;0,1,-1,3,4,5> 8 648 650 1 640 645
<==
