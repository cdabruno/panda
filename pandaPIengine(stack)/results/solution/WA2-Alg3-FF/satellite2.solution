Random seed: 42
Time limit: 15 seconds
Reading input from results/grounded/satellite2.sas.
- State has 14 bits divided into 14 mutex groups.
- Domain contains 34 actions.
- Domain contains 40 tasks.
- Domain contains 59 methods.
- The initial state contains 4 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 40
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: cost optimal
 - weight: 2
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Greedy A* Search with weight 2
- Distance G is "modification depth"
Search Results
- Search time 0.002 seconds
- Visited list time 3.9e-05 seconds
- Visited list inserts 15
- Visited list pruned 0
- Visited list contains 15
- Visited list hash collisions 0
- Generated 123 search nodes
  Calculated heuristic for 80 nodes
  One modifications 42
  Effectless actions 1
- including 42 one modification actions
- including 0 one modification methods
- and       1 progressions of effectless actions
- Generated 40000 nodes per second
- Final fringe contains 6 nodes
- Status: Solved
- Found solution of length 8
- Total costs of actions: 5
==>
17 switch_on[instrument0,satellite0]
116 turn_to[satellite0,star0,phenomenon1]
117 calibrate[satellite0,instrument0,star0]
118 turn_to[satellite0,phenomenon2,star0]
119 take_image[satellite0,phenomenon2,instrument0,image1]
root 1
115 auto_calibrate[satellite0,instrument0] -> method6 116 117
16 do_observation[phenomenon2,image1] -> <method0;activate_instrument[satellite0,instrument0];method5;0;-1,-2,1,2> 17 115 118 119
1 __top[] -> __top_method 16
<==
