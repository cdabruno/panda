Random seed: 42
Time limit: 15 seconds
Reading input from results/grounded/satellite16.sas.
- State has 11 bits divided into 11 mutex groups.
- Domain contains 43 actions.
- Domain contains 55 tasks.
- Domain contains 92 methods.
- The initial state contains 2 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 55
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Greedy Search
Search Results
- Search time 0.05 seconds
- Visited list time 0.0006 seconds
- Visited list inserts 150
- Visited list pruned 6
- Visited list contains 144
- Visited list hash collisions 0
- Generated 1667 search nodes
  Calculated heuristic for 1433 nodes
  One modifications 220
  Effectless actions 14
- including 220 one modification actions
- including 0 one modification methods
- and       14 progressions of effectless actions
- Generated 28660 nodes per second
- Final fringe contains 1173 nodes
- Status: Solved
- Found solution of length 19
- Total costs of actions: 10
==>
1625 switch_on[instrument0,satellite0]
1648 calibrate[satellite0,instrument0,star0]
1649 turn_to[satellite0,planet3,star0]
1651 take_image[satellite0,planet3,instrument0,infrared2]
1652 turn_to[satellite0,planet5,planet3]
1653 take_image[satellite0,planet5,instrument0,infrared2]
1654 turn_to[satellite0,planet2,planet5]
1660 take_image[satellite0,planet2,instrument0,infrared2]
1661 turn_to[satellite0,star4,planet2]
1662 take_image[satellite0,star4,instrument0,infrared0]
root 0
1659 method1_splitted_1[satellite0,planet2,infrared2] -> _splitting_method_method1_splitted_1 1660
1650 method1_splitted_1[satellite0,planet3,infrared2] -> _splitting_method_method1_splitted_1 1651
1636 auto_calibrate[satellite0,instrument0] -> method7 1648
1526 do_observation[planet2,infrared2] -> method1 1654 1659
1491 do_observation[star4,infrared0] -> <method1;method1_splitted_1[satellite0,star4,infrared0];_splitting_method_method1_splitted_1;1;0,-1> 1661 1662
1489 activate_instrument[satellite0,instrument0] -> method5 1625 1636
53 do_observation[planet5,infrared2] -> method0 1489 1652 1653
7 do_observation[planet3,infrared2] -> method1 1649 1650
0 __top[] -> __top_method 1526 7 1491 53
<==
