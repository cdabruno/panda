Random seed: 42
Time limit: 15 seconds
Reading input from results/grounded/transport4.sas.
- State has 20 bits divided into 20 mutex groups.
- Domain contains 47 actions.
- Domain contains 68 tasks.
- Domain contains 63 methods.
- The initial state contains 6 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 65
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Greedy Search
Search Results
- Search time 0.058 seconds
- Visited list time 0.002559 seconds
- Visited list inserts 832
- Visited list pruned 231
- Visited list contains 601
- Visited list hash collisions 0
- Generated 4582 search nodes
  Calculated heuristic for 2020 nodes
  One modifications 2448
  Effectless actions 114
- including 2448 one modification actions
- including 0 one modification methods
- and       114 progressions of effectless actions
- Generated 34827 nodes per second
- Final fringe contains 784 nodes
- Status: Solved
- Found solution of length 45
- Total costs of actions: 20
==>
39 drive[truck-0,city-loc-0,city-loc-3]
46 drive[truck-0,city-loc-3,city-loc-2]
56 pick-up[truck-0,city-loc-2,package-3,capacity-2,capacity-3]
60 drive[truck-0,city-loc-2,city-loc-1]
64 pick-up[truck-0,city-loc-1,package-1,capacity-1,capacity-2]
78 drive[truck-0,city-loc-1,city-loc-2]
79 drive[truck-0,city-loc-2,city-loc-3]
83 drive[truck-0,city-loc-3,city-loc-0]
84 noop[truck-0,city-loc-0]
116 pick-up[truck-0,city-loc-0,package-0,capacity-0,capacity-1]
4452 drop[truck-0,city-loc-0,package-3,capacity-0,capacity-1]
4453 drive[truck-0,city-loc-0,city-loc-3]
4522 pick-up[truck-0,city-loc-3,package-2,capacity-0,capacity-1]
4559 drop[truck-0,city-loc-3,package-0,capacity-0,capacity-1]
4560 drive[truck-0,city-loc-3,city-loc-0]
4573 drop[truck-0,city-loc-0,package-1,capacity-1,capacity-2]
4574 drive[truck-0,city-loc-0,city-loc-3]
4575 drive[truck-0,city-loc-3,city-loc-2]
4576 drive[truck-0,city-loc-2,city-loc-1]
4580 drop[truck-0,city-loc-1,package-2,capacity-2,capacity-3]
root 0
4579 unload[truck-0,city-loc-1,package-2] -> m-unload 4580
4565 unload[truck-0,city-loc-0,package-1] -> m-unload 4573
4542 get-to[truck-0,city-loc-3] -> m-drive-to 4574
4530 get-to[truck-0,city-loc-2] -> m-drive-to-via 4542 4575
4526 get-to[truck-0,city-loc-1] -> m-drive-to-via 4530 4576
4457 unload[truck-0,city-loc-3,package-0] -> m-unload 4559
4442 get-to[truck-0,city-loc-3] -> m-drive-to 4453
115 unload[truck-0,city-loc-0,package-3] -> m-unload 4452
110 load[truck-0,city-loc-0,package-0] -> m-load 116
77 get-to[truck-0,city-loc-2] -> m-drive-to 78
75 get-to[truck-0,city-loc-3] -> m-drive-to-via 77 79
68 get-to[truck-0,city-loc-0] -> m-drive-to-via 75 4560
63 load[truck-0,city-loc-1,package-1] -> m-load 64
59 get-to[truck-0,city-loc-0] -> m-i-am-there 84
50 load[truck-0,city-loc-2,package-3] -> m-load 56
45 load[truck-0,city-loc-3,package-2] -> m-load 4522
38 get-to[truck-0,city-loc-0] -> m-drive-to 83
33 get-to[truck-0,city-loc-2] -> m-drive-to 46
30 get-to[truck-0,city-loc-1] -> m-drive-to 60
29 m-deliver_splitted_1[truck-0,package-3] -> _splitting_method_m-deliver_splitted_1 33 50
13 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 38 110
5 get-to[truck-0,city-loc-3] -> m-drive-to 39
3 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 5 45
2 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 30 63
0 __top[] -> <<<<__top_method;deliver[package-3,city-loc-0];m-deliver;3;0,1,2,-1,-2,-3>;deliver[package-2,city-loc-1];m-deliver;2;0,1,-1,-2,-3,3,4,5>;deliver[package-1,city-loc-0];m-deliver;1;0,-1,-2,-3,2,3,4,5,6,7>;deliver[package-0,city-loc-3];m-deliver;0;-1,-2,-3,1,2,3,4,5,6,7,8,9> 13 4442 4457 2 68 4565 3 4526 4579 29 59 115
<==
