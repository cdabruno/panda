Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/pcp4.sas.
- State has 8 bits divided into 8 mutex groups.
- Domain contains 12 actions.
- Domain contains 15 tasks.
- Domain contains 13 methods.
- The initial state contains 1 set bits.
- The initial task is "__top[]".
- State-based goal contains 1 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 15
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 2
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
- Starting state heuristic value: 9
Search Results
- Search time 0.001 seconds
- Visited list time 4.3e-05 seconds
- Visited list inserts 11
- Visited list pruned 0
- Visited list contains 11
- Visited list hash collisions 0
- Visited list used hash buckets 11
- Generated 139 search nodes
  Calculated heuristic for 56 nodes
  One modifications 83
  Effectless actions 0
- including 83 one modification actions
- including 0 one modification methods
- and       0 progressions of effectless actions
- Generated 56000 nodes per second
- Final fringe contains 9 nodes
- Status: Solved
- Found solution of length 15
- Total costs of actions: 10
==>
82 t1G1[]
92 t1G2[]
123 t3G1[]
124 t3G2[]
125 cG1[]
126 cG2[]
127 bG1[]
128 bG2[]
129 bG1[]
130 bG2[]
root 0
122 SG2[] -> G2_S2t3_c_b 124 126 128
91 SG1[] -> G1_S2t3_c 123 125
81 SG1[] -> G1_S2t1_S_b_b 82 91 127 129
4 SG2[] -> G2_S2t1_S_b 92 122 130
0 __top[] -> __top_method 81 4
<==
