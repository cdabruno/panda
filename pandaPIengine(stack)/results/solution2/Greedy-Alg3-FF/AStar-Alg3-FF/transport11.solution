Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport11.sas.
- State has 30 bits divided into 30 mutex groups.
- Domain contains 70 actions.
- Domain contains 115 tasks.
- Domain contains 109 methods.
- The initial state contains 8 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 109
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.236 seconds
- Visited list time 0.034557 seconds
- Visited list inserts 5784
- Visited list pruned 568
- Visited list contains 5216
- Visited list hash collisions 569
- Visited list used hash buckets 5215
- Generated 20556 search nodes
  Calculated heuristic for 16255 nodes
  One modifications 3444
  Effectless actions 857
- including 3444 one modification actions
- including 0 one modification methods
- and       857 progressions of effectless actions
- Generated 68877 nodes per second
- Final fringe contains 7115 nodes
- Status: Solved
- Found solution of length 43
- Total costs of actions: 17
==>
305 drive[truck-1,city-loc-1,city-loc-2]
16168 drive[truck-1,city-loc-2,city-loc-2]
16170 pick-up[truck-1,city-loc-2,package-0,capacity-1,capacity-2]
16195 pick-up[truck-1,city-loc-2,package-1,capacity-0,capacity-1]
16198 drive[truck-1,city-loc-2,city-loc-1]
16206 drop[truck-1,city-loc-1,package-0,capacity-0,capacity-1]
16207 drive[truck-1,city-loc-1,city-loc-0]
16234 pick-up[truck-1,city-loc-0,package-2,capacity-0,capacity-1]
16237 drive[truck-1,city-loc-0,city-loc-3]
16238 noop[truck-1,city-loc-3]
16457 drop[truck-1,city-loc-3,package-1,capacity-0,capacity-1]
20535 drop[truck-1,city-loc-3,package-2,capacity-1,capacity-2]
20536 drive[truck-1,city-loc-3,city-loc-0]
20538 pick-up[truck-1,city-loc-0,package-3,capacity-1,capacity-2]
20547 drive[truck-1,city-loc-0,city-loc-1]
20548 drive[truck-1,city-loc-1,city-loc-2]
20553 drop[truck-1,city-loc-2,package-3,capacity-1,capacity-2]
root 0
20552 unload[truck-1,city-loc-2,package-3] -> m-unload 20553
20546 get-to[truck-1,city-loc-1] -> m-drive-to 20547
20543 get-to[truck-1,city-loc-2] -> m-drive-to-via 20546 20548
20537 load[truck-1,city-loc-0,package-3] -> m-load 20538
16394 unload[truck-1,city-loc-3,package-1] -> m-unload 16457
16261 unload[truck-1,city-loc-3,package-2] -> m-unload 20535
16236 get-to[truck-1,city-loc-3] -> m-i-am-there 16238
16232 load[truck-1,city-loc-0,package-2] -> m-load 16234
16202 unload[truck-1,city-loc-1,package-0] -> m-unload 16206
16197 get-to[truck-1,city-loc-3] -> m-drive-to 16237
16172 get-to[truck-1,city-loc-1] -> m-drive-to 16198
16169 load[truck-1,city-loc-2,package-0] -> m-load 16170
16167 load[truck-1,city-loc-2,package-1] -> m-load 16195
281 get-to[truck-1,city-loc-0] -> m-drive-to 20536
277 get-to[truck-1,city-loc-0] -> m-drive-to 16207
271 get-to[truck-1,city-loc-2] -> m-drive-to 16168
144 m-deliver_splitted_1[truck-1,package-3] -> _splitting_method_m-deliver_splitted_1 281 20537
136 m-deliver_splitted_1[truck-1,package-0] -> _splitting_method_m-deliver_splitted_1 271 16169
134 m-deliver_splitted_1[truck-1,package-2] -> _splitting_method_m-deliver_splitted_1 277 16232
129 get-to[truck-1,city-loc-2] -> m-drive-to 305
127 deliver[package-3,city-loc-2] -> m-deliver 144 20543 20552
125 deliver[package-0,city-loc-1] -> m-deliver 136 16172 16202
38 m-deliver_splitted_1[truck-1,package-1] -> _splitting_method_m-deliver_splitted_1 129 16167
4 deliver[package-2,city-loc-3] -> m-deliver 134 16236 16261
2 deliver[package-1,city-loc-3] -> m-deliver 38 16197 16394
0 __top[] -> __top_method 125 2 4 127
<==
