Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/satellite2.sas.
- State has 14 bits divided into 14 mutex groups.
- Domain contains 34 actions.
- Domain contains 40 tasks.
- Domain contains 59 methods.
- The initial state contains 4 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: yes
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 40
- The problem is acyclic
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 0
No heuristics given, setting default ... 
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(ff;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: total order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
- Starting state heuristic value: 7
Search Results
- Search time 0 seconds
- Visited list time 1.4e-05 seconds
- Visited list inserts 5
- Visited list pruned 0
- Visited list contains 5
- Visited list hash collisions 0
- Visited list used hash buckets 5
- Generated 43 search nodes
  Calculated heuristic for 28 nodes
  One modifications 14
  Effectless actions 1
- including 14 one modification actions
- including 0 one modification methods
- and       1 progressions of effectless actions
- Generated -2147483648 nodes per second
- Final fringe contains 4 nodes
- Status: Solved
- Found solution of length 8
- Total costs of actions: 5
==>
21 switch_on[instrument1,satellite1]
37 turn_to[satellite1,star0,phenomenon2]
38 calibrate[satellite1,instrument1,star0]
39 turn_to[satellite1,phenomenon2,star0]
40 take_image[satellite1,phenomenon2,instrument1,image1]
root 1
36 auto_calibrate[satellite1,instrument1] -> method6 37 38
20 do_observation[phenomenon2,image1] -> <method0;activate_instrument[satellite1,instrument1];method5;0;-1,-2,1,2> 21 36 39 40
1 __top[] -> __top_method 20
<==
