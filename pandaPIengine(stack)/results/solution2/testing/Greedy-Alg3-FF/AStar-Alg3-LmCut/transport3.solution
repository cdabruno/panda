Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport3.sas.
- State has 15 bits divided into 15 mutex groups.
- Domain contains 28 actions.
- Domain contains 44 tasks.
- Domain contains 42 methods.
- The initial state contains 5 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 42
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.019 seconds
- Visited list time 0.000397 seconds
- Visited list inserts 69
- Visited list pruned 4
- Visited list contains 65
- Visited list hash collisions 4
- Visited list used hash buckets 65
- Generated 262 search nodes
  Calculated heuristic for 213 nodes
  One modifications 45
  Effectless actions 4
- including 45 one modification actions
- including 0 one modification methods
- and       4 progressions of effectless actions
- Generated 11210 nodes per second
- Final fringe contains 93 nodes
- Status: Solved
- Found solution of length 28
- Total costs of actions: 12
==>
24 drive[truck-0,city-loc-0,city-loc-1]
210 drive[truck-0,city-loc-1,city-loc-2]
211 noop[truck-0,city-loc-2]
216 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2]
228 pick-up[truck-0,city-loc-2,package-2,capacity-0,capacity-1]
231 drive[truck-0,city-loc-2,city-loc-1]
242 drop[truck-0,city-loc-1,package-1,capacity-0,capacity-1]
243 pick-up[truck-0,city-loc-1,package-0,capacity-0,capacity-1]
249 drive[truck-0,city-loc-1,city-loc-0]
250 noop[truck-0,city-loc-0]
258 drop[truck-0,city-loc-0,package-2,capacity-0,capacity-1]
259 drop[truck-0,city-loc-0,package-0,capacity-1,capacity-2]
root 0
257 unload[truck-0,city-loc-0,package-0] -> m-unload 259
256 unload[truck-0,city-loc-0,package-2] -> m-unload 258
248 get-to[truck-0,city-loc-0] -> m-i-am-there 250
240 unload[truck-0,city-loc-1,package-1] -> m-unload 242
230 get-to[truck-0,city-loc-0] -> m-drive-to 249
222 get-to[truck-0,city-loc-1] -> m-drive-to 231
215 load[truck-0,city-loc-2,package-2] -> m-load 228
214 load[truck-0,city-loc-2,package-1] -> m-load 216
209 load[truck-0,city-loc-1,package-0] -> m-load 243
23 get-to[truck-0,city-loc-2] -> m-i-am-there 211
12 get-to[truck-0,city-loc-1] -> m-drive-to 24
7 get-to[truck-0,city-loc-2] -> m-drive-to 210
6 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 7 214
4 m-deliver_splitted_1[truck-0,package-2] -> _splitting_method_m-deliver_splitted_1 23 215
2 m-deliver_splitted_1[truck-0,package-0] -> _splitting_method_m-deliver_splitted_1 12 209
0 __top[] -> <<<__top_method;deliver[package-2,city-loc-0];m-deliver;2;0,1,-1,-2,-3>;deliver[package-1,city-loc-1];m-deliver;1;0,-1,-2,-3,2,3,4>;deliver[package-0,city-loc-0];m-deliver;0;-1,-2,-3,1,2,3,4,5,6> 2 248 257 6 222 240 4 230 256
<==
