Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/pcp11.sas.
- State has 6 bits divided into 6 mutex groups.
- Domain contains 8 actions.
- Domain contains 11 tasks.
- Domain contains 9 methods.
- The initial state contains 1 set bits.
- The initial task is "__top[]".
- State-based goal contains 1 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 11
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 2
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- A* Search
- Distance G is "modification depth"
Search Results
- Search time 0.002 seconds
- Visited list time 0.000352 seconds
- Visited list inserts 92
- Visited list pruned 0
- Visited list contains 92
- Visited list hash collisions 0
- Visited list used hash buckets 92
- Generated 884 search nodes
  Calculated heuristic for 362 nodes
  One modifications 522
  Effectless actions 0
- including 522 one modification actions
- including 0 one modification methods
- and       0 progressions of effectless actions
- Generated 181000 nodes per second
- Final fringe contains 40 nodes
- Status: Solved
- Found solution of length 33
- Total costs of actions: 24
==>
32 t1G1[]
73 t1G2[]
117 t1G1[]
214 t1G2[]
246 t2G1[]
841 t2G2[]
860 t2G1[]
861 t2G2[]
862 p1G1[]
863 p1G2[]
864 p1G1[]
865 p1G2[]
866 p0G1[]
867 p0G2[]
868 p1G1[]
869 p1G2[]
870 p1G1[]
871 p1G2[]
872 p0G1[]
873 p0G2[]
874 p1G1[]
875 p1G2[]
876 p1G1[]
877 p1G2[]
root 0
859 SG2[] -> G2_S2t2_1_1_0 861 863 865 867
840 SG1[] -> G1_S2t2_1 860 862
245 SG2[] -> G2_S2t2_S_1_1_0 841 859 869 871 873
213 SG1[] -> G1_S2t2_S_1 246 840 864
116 SG2[] -> G2_S2t1_S_1 214 245 875
72 SG1[] -> G1_S2t1_S_0_1_1 117 213 866 868 870
31 SG1[] -> G1_S2t1_S_0_1_1 32 72 872 874 876
3 SG2[] -> G2_S2t1_S_1 73 116 877
0 __top[] -> __top_method 31 3
<==
