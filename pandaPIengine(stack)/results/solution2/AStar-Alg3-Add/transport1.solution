Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport1.sas.
- State has 11 bits divided into 11 mutex groups.
- Domain contains 13 actions.
- Domain contains 19 tasks.
- Domain contains 16 methods.
- The initial state contains 4 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 17
- The problem is cyclic
- Number of cyclic SCCs: 1
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (1 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- A* Search
- Distance G is "modification depth"
- Starting state heuristic value: 28
Search Results
- Search time 0 seconds
- Visited list time 8.3e-05 seconds
- Visited list inserts 22
- Visited list pruned 0
- Visited list contains 22
- Visited list hash collisions 0
- Visited list used hash buckets 22
- Generated 110 search nodes
  Calculated heuristic for 67 nodes
  One modifications 39
  Effectless actions 4
- including 39 one modification actions
- including 0 one modification methods
- and       4 progressions of effectless actions
- Generated -2147483648 nodes per second
- Final fringe contains 16 nodes
- Status: Solved
- Found solution of length 15
- Total costs of actions: 8
==>
92 drive[truck-0,city-loc-2,city-loc-1]
93 pick-up[truck-0,city-loc-1,package-1,capacity-0,capacity-1]
97 drive[truck-0,city-loc-1,city-loc-2]
101 drop[truck-0,city-loc-2,package-1,capacity-0,capacity-1]
102 drive[truck-0,city-loc-2,city-loc-1]
103 pick-up[truck-0,city-loc-1,package-0,capacity-0,capacity-1]
105 drive[truck-0,city-loc-1,city-loc-0]
106 drop[truck-0,city-loc-0,package-0,capacity-0,capacity-1]
root 0
104 get-to[truck-0,city-loc-0] -> m-drive-to 105
96 get-to[truck-0,city-loc-2] -> m-drive-to 97
10 get-to[truck-0,city-loc-1] -> m-drive-to 102
5 get-to[truck-0,city-loc-1] -> m-drive-to 92
3 m-deliver_splitted_1[truck-0,package-0] -> <_splitting_method_m-deliver_splitted_1;load[truck-0,city-loc-1,package-0];m-load;1;0,-1> 10 103
1 m-deliver_splitted_1[truck-0,package-1] -> <_splitting_method_m-deliver_splitted_1;load[truck-0,city-loc-1,package-1];m-load;1;0,-1> 5 93
0 __top[] -> <<<<__top_method;deliver[package-1,city-loc-2];m-deliver;1;0,-1,-2,-3>;unload[truck-0,city-loc-2,package-1];m-unload;3;0,1,2,-1>;deliver[package-0,city-loc-0];m-deliver;0;-1,-2,-3,1,2,3>;unload[truck-0,city-loc-0,package-0];m-unload;2;0,1,-1,3,4,5> 3 104 106 1 96 101
<==
