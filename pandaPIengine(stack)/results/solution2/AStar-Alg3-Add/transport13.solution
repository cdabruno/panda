Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport13.sas.
- State has 36 bits divided into 36 mutex groups.
- Domain contains 88 actions.
- Domain contains 144 tasks.
- Domain contains 137 methods.
- The initial state contains 9 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 136
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- the option "store cuts" of the RC heuristic can only be used with the inner heuristic LM-Cut. It will be disabled.
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(add;distance;correct count)
Search config:
 - type: path cost
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- A* Search
- Distance G is "modification depth"
- Starting state heuristic value: 82
Search Results
- Search time 0.22 seconds
- Visited list time 0.042514 seconds
- Visited list inserts 14256
- Visited list pruned 4478
- Visited list contains 9778
- Visited list hash collisions 4478
- Visited list used hash buckets 9778
- Generated 45483 search nodes
  Calculated heuristic for 32563 nodes
  One modifications 11192
  Effectless actions 1728
- including 11192 one modification actions
- including 0 one modification methods
- and       1728 progressions of effectless actions
- Generated 148013 nodes per second
- Final fringe contains 9378 nodes
- Status: Solved
- Found solution of length 63
- Total costs of actions: 26
==>
44985 noop[truck-1,city-loc-0]
44994 pick-up[truck-1,city-loc-0,package-4,capacity-1,capacity-2]
45171 drive[truck-1,city-loc-0,city-loc-1]
45174 drive[truck-0,city-loc-0,city-loc-2]
45183 pick-up[truck-0,city-loc-2,package-1,capacity-1,capacity-2]
45202 drive[truck-0,city-loc-2,city-loc-0]
45206 drive[truck-0,city-loc-0,city-loc-1]
45210 drive[truck-0,city-loc-1,city-loc-4]
45216 drop[truck-0,city-loc-4,package-1,capacity-1,capacity-2]
45217 drive[truck-1,city-loc-1,city-loc-4]
45218 noop[truck-1,city-loc-4]
45226 drop[truck-1,city-loc-4,package-4,capacity-1,capacity-2]
45227 pick-up[truck-1,city-loc-4,package-0,capacity-1,capacity-2]
45244 drive[truck-1,city-loc-4,city-loc-1]
45249 pick-up[truck-1,city-loc-1,package-3,capacity-0,capacity-1]
45393 drive[truck-1,city-loc-1,city-loc-0]
45411 drop[truck-1,city-loc-0,package-0,capacity-0,capacity-1]
45412 drive[truck-1,city-loc-0,city-loc-2]
45419 pick-up[truck-1,city-loc-2,package-2,capacity-0,capacity-1]
45455 drive[truck-1,city-loc-2,city-loc-0]
45456 drive[truck-1,city-loc-0,city-loc-3]
45475 drop[truck-1,city-loc-3,package-3,capacity-0,capacity-1]
45476 drive[truck-1,city-loc-3,city-loc-0]
45477 drive[truck-1,city-loc-0,city-loc-1]
45478 drive[truck-1,city-loc-1,city-loc-4]
45480 drop[truck-1,city-loc-4,package-2,capacity-1,capacity-2]
root 0
45479 unload[truck-1,city-loc-4,package-2] -> m-unload 45480
45471 unload[truck-1,city-loc-3,package-3] -> m-unload 45475
45454 get-to[truck-1,city-loc-0] -> m-drive-to 45476
45438 get-to[truck-1,city-loc-1] -> m-drive-to-via 45454 45477
45426 get-to[truck-1,city-loc-4] -> m-drive-to-via 45438 45478
45413 load[truck-1,city-loc-2,package-2] -> m-load 45419
45409 unload[truck-1,city-loc-0,package-0] -> m-unload 45411
45392 get-to[truck-1,city-loc-0] -> m-drive-to 45455
45264 get-to[truck-1,city-loc-3] -> m-drive-to-via 45392 45456
45243 get-to[truck-1,city-loc-1] -> m-drive-to 45244
45232 get-to[truck-1,city-loc-0] -> m-drive-to-via 45243 45393
45225 load[truck-1,city-loc-4,package-0] -> m-load 45227
45220 unload[truck-1,city-loc-4,package-4] -> m-unload 45226
45212 unload[truck-0,city-loc-4,package-1] -> m-unload 45216
45193 get-to[truck-0,city-loc-0] -> m-drive-to 45202
45190 get-to[truck-0,city-loc-1] -> m-drive-to-via 45193 45206
45186 get-to[truck-0,city-loc-4] -> m-drive-to-via 45190 45210
45179 load[truck-0,city-loc-2,package-1] -> m-load 45183
45172 load[truck-1,city-loc-1,package-3] -> m-load 45249
44996 get-to[truck-1,city-loc-4] -> m-i-am-there 45218
44990 load[truck-1,city-loc-0,package-4] -> m-load 44994
44984 get-to[truck-1,city-loc-0] -> m-i-am-there 44985
44980 m-deliver_splitted_1[truck-1,package-4] -> _splitting_method_m-deliver_splitted_1 44984 44990
44975 get-to[truck-1,city-loc-1] -> m-drive-to 45171
44971 get-to[truck-1,city-loc-4] -> m-drive-to 45217
44968 get-to[truck-1,city-loc-2] -> m-drive-to 45412
44967 m-deliver_splitted_1[truck-1,package-3] -> _splitting_method_m-deliver_splitted_1 44975 45172
44965 m-deliver_splitted_1[truck-1,package-0] -> _splitting_method_m-deliver_splitted_1 44971 45225
44963 deliver[package-4,city-loc-4] -> m-deliver 44980 44996 45220
44961 m-deliver_splitted_1[truck-1,package-2] -> _splitting_method_m-deliver_splitted_1 44968 45413
44951 deliver[package-0,city-loc-0] -> m-deliver 44965 45232 45409
44948 get-to[truck-0,city-loc-2] -> m-drive-to 45174
44946 deliver[package-3,city-loc-3] -> m-deliver 44967 45264 45471
44945 m-deliver_splitted_1[truck-0,package-1] -> _splitting_method_m-deliver_splitted_1 44948 45179
3 deliver[package-2,city-loc-4] -> m-deliver 44961 45426 45479
1 deliver[package-1,city-loc-4] -> m-deliver 44945 45186 45212
0 __top[] -> __top_method 44951 1 3 44946 44963
<==
