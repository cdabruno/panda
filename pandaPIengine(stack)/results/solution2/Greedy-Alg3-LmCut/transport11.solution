Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport11.sas.
- State has 30 bits divided into 30 mutex groups.
- Domain contains 70 actions.
- Domain contains 115 tasks.
- Domain contains 109 methods.
- The initial state contains 8 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 109
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: greedy
 - weight: 1
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy Search
- Starting state heuristic value: 28
Search Results
- Search time 0.368 seconds
- Visited list time 0.011837 seconds
- Visited list inserts 3982
- Visited list pruned 1780
- Visited list contains 2202
- Visited list hash collisions 1780
- Visited list used hash buckets 2202
- Generated 19257 search nodes
  Calculated heuristic for 8738 nodes
  One modifications 9930
  Effectless actions 589
- including 9930 one modification actions
- including 0 one modification methods
- and       589 progressions of effectless actions
- Generated 23744 nodes per second
- Final fringe contains 1472 nodes
- Status: Solved
- Found solution of length 51
- Total costs of actions: 21
==>
51 drive[truck-1,city-loc-1,city-loc-2]
75 drive[truck-1,city-loc-2,city-loc-1]
76 drive[truck-1,city-loc-1,city-loc-0]
77 noop[truck-1,city-loc-0]
82 pick-up[truck-1,city-loc-0,package-2,capacity-1,capacity-2]
88 pick-up[truck-1,city-loc-0,package-3,capacity-0,capacity-1]
12120 drive[truck-1,city-loc-0,city-loc-3]
19174 drop[truck-1,city-loc-3,package-2,capacity-0,capacity-1]
19175 drive[truck-1,city-loc-3,city-loc-0]
19176 drive[truck-1,city-loc-0,city-loc-1]
19177 drive[truck-1,city-loc-1,city-loc-2]
19180 drive[truck-1,city-loc-2,city-loc-2]
19201 pick-up[truck-1,city-loc-2,package-0,capacity-0,capacity-1]
19208 drop[truck-1,city-loc-2,package-3,capacity-0,capacity-1]
19209 pick-up[truck-1,city-loc-2,package-1,capacity-0,capacity-1]
19238 drive[truck-1,city-loc-2,city-loc-1]
19239 noop[truck-1,city-loc-1]
19250 drop[truck-1,city-loc-1,package-0,capacity-0,capacity-1]
19251 drive[truck-1,city-loc-1,city-loc-0]
19252 drive[truck-1,city-loc-0,city-loc-3]
19254 drop[truck-1,city-loc-3,package-1,capacity-1,capacity-2]
root 0
19253 unload[truck-1,city-loc-3,package-1] -> m-unload 19254
19244 unload[truck-1,city-loc-1,package-0] -> m-unload 19250
19237 get-to[truck-1,city-loc-1] -> m-drive-to 19238
19235 get-to[truck-1,city-loc-0] -> m-drive-to-via 19237 19251
19231 get-to[truck-1,city-loc-3] -> m-drive-to-via 19235 19252
19207 get-to[truck-1,city-loc-1] -> m-i-am-there 19239
19184 load[truck-1,city-loc-2,package-1] -> m-load 19209
19179 unload[truck-1,city-loc-2,package-3] -> m-unload 19208
12131 unload[truck-1,city-loc-3,package-2] -> m-unload 19174
12119 get-to[truck-1,city-loc-0] -> m-drive-to 19175
126 get-to[truck-1,city-loc-1] -> m-drive-to-via 12119 19176
96 get-to[truck-1,city-loc-2] -> m-drive-to-via 126 19177
84 get-to[truck-1,city-loc-3] -> m-drive-to 12120
81 load[truck-1,city-loc-0,package-2] -> m-load 82
80 load[truck-1,city-loc-0,package-3] -> m-load 88
74 load[truck-1,city-loc-2,package-0] -> m-load 19201
50 get-to[truck-1,city-loc-2] -> m-drive-to 19180
37 get-to[truck-1,city-loc-0] -> m-i-am-there 77
34 m-deliver_splitted_1[truck-1,package-3] -> _splitting_method_m-deliver_splitted_1 37 80
32 deliver[package-3,city-loc-2] -> m-deliver 34 96 19179
30 m-deliver_splitted_1[truck-1,package-1] -> _splitting_method_m-deliver_splitted_1 50 19184
25 get-to[truck-1,city-loc-2] -> m-drive-to 51
23 m-deliver_splitted_1[truck-1,package-0] -> _splitting_method_m-deliver_splitted_1 25 74
21 deliver[package-0,city-loc-1] -> m-deliver 23 19207 19244
14 get-to[truck-1,city-loc-1] -> m-drive-to 75
10 get-to[truck-1,city-loc-0] -> m-drive-to-via 14 76
6 m-deliver_splitted_1[truck-1,package-2] -> _splitting_method_m-deliver_splitted_1 10 81
4 deliver[package-2,city-loc-3] -> m-deliver 6 84 12131
2 deliver[package-1,city-loc-3] -> m-deliver 30 19231 19253
0 __top[] -> __top_method 21 2 4 32
<==
