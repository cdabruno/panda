Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport11.sas.
- State has 30 bits divided into 30 mutex groups.
- Domain contains 70 actions.
- Domain contains 115 tasks.
- Domain contains 109 methods.
- The initial state contains 8 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 109
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: path cost
 - weight: 2
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy A* Search with weight 2
- Distance G is "modification depth"
- Starting state heuristic value: 28
Search Results
- Search time 0.102 seconds
- Visited list time 0.001836 seconds
- Visited list inserts 561
- Visited list pruned 125
- Visited list contains 436
- Visited list hash collisions 125
- Visited list used hash buckets 436
- Generated 2133 search nodes
  Calculated heuristic for 1476 nodes
  One modifications 576
  Effectless actions 81
- including 576 one modification actions
- including 0 one modification methods
- and       81 progressions of effectless actions
- Generated 14470 nodes per second
- Final fringe contains 442 nodes
- Status: Solved
- Found solution of length 49
- Total costs of actions: 20
==>
268 drive[truck-1,city-loc-1,city-loc-0]
269 noop[truck-1,city-loc-0]
1630 pick-up[truck-1,city-loc-0,package-2,capacity-1,capacity-2]
1636 pick-up[truck-1,city-loc-0,package-3,capacity-0,capacity-1]
2004 drive[truck-1,city-loc-0,city-loc-3]
2070 drive[truck-1,city-loc-3,city-loc-0]
2071 drive[truck-1,city-loc-0,city-loc-1]
2075 drive[truck-1,city-loc-1,city-loc-2]
2076 noop[truck-1,city-loc-2]
2095 drop[truck-1,city-loc-2,package-3,capacity-0,capacity-1]
2096 pick-up[truck-1,city-loc-2,package-0,capacity-0,capacity-1]
2098 drive[truck-1,city-loc-2,city-loc-1]
2107 drop[truck-1,city-loc-1,package-0,capacity-0,capacity-1]
2108 drive[truck-1,city-loc-1,city-loc-2]
2111 pick-up[truck-1,city-loc-2,package-1,capacity-0,capacity-1]
2121 drive[truck-1,city-loc-2,city-loc-1]
2122 drive[truck-1,city-loc-1,city-loc-0]
2123 drive[truck-1,city-loc-0,city-loc-3]
2130 drop[truck-1,city-loc-3,package-1,capacity-0,capacity-1]
2131 drop[truck-1,city-loc-3,package-2,capacity-1,capacity-2]
root 0
2129 unload[truck-1,city-loc-3,package-1] -> m-unload 2130
2120 get-to[truck-1,city-loc-1] -> m-drive-to 2121
2118 get-to[truck-1,city-loc-0] -> m-drive-to-via 2120 2122
2114 get-to[truck-1,city-loc-3] -> m-drive-to-via 2118 2123
2110 load[truck-1,city-loc-2,package-1] -> m-load 2111
2103 unload[truck-1,city-loc-1,package-0] -> m-unload 2107
2097 get-to[truck-1,city-loc-1] -> m-drive-to 2098
2094 unload[truck-1,city-loc-2,package-3] -> m-unload 2095
2089 load[truck-1,city-loc-2,package-0] -> m-load 2096
2069 unload[truck-1,city-loc-3,package-2] -> m-unload 2131
2003 get-to[truck-1,city-loc-0] -> m-drive-to 2070
1668 get-to[truck-1,city-loc-1] -> m-drive-to-via 2003 2071
1644 get-to[truck-1,city-loc-2] -> m-drive-to-via 1668 2075
1632 get-to[truck-1,city-loc-3] -> m-drive-to 2004
1629 load[truck-1,city-loc-0,package-2] -> m-load 1630
521 load[truck-1,city-loc-0,package-3] -> m-load 1636
260 get-to[truck-1,city-loc-0] -> m-drive-to 268
235 get-to[truck-1,city-loc-2] -> m-i-am-there 2076
46 m-deliver_splitted_1[truck-1,package-0] -> _splitting_method_m-deliver_splitted_1 235 2089
44 m-deliver_splitted_1[truck-1,package-3] -> _splitting_method_m-deliver_splitted_1 260 521
42 deliver[package-3,city-loc-2] -> m-deliver 44 1644 2094
35 get-to[truck-1,city-loc-2] -> m-drive-to 2108
31 get-to[truck-1,city-loc-0] -> m-i-am-there 269
28 m-deliver_splitted_1[truck-1,package-1] -> _splitting_method_m-deliver_splitted_1 35 2110
12 deliver[package-0,city-loc-1] -> m-deliver 46 2097 2103
6 m-deliver_splitted_1[truck-1,package-2] -> _splitting_method_m-deliver_splitted_1 31 1629
4 deliver[package-2,city-loc-3] -> m-deliver 6 1632 2069
2 deliver[package-1,city-loc-3] -> m-deliver 28 2114 2129
0 __top[] -> __top_method 12 2 4 42
<==
