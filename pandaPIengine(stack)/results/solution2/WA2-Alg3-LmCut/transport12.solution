Random seed: 42
Time limit: 20 seconds
Reading input from results/grounded/transport12.sas.
- State has 32 bits divided into 32 mutex groups.
- Domain contains 82 actions.
- Domain contains 129 tasks.
- Domain contains 131 methods.
- The initial state contains 8 set bits.
- The initial task is "__top[]".
- State-based goal contains 0 bits.
- Instance is totally-ordered: no
- Instance has unique paths: yes
- Instance is parallel sequences: yes
Calculate SCCs...
- Number of SCCs: 121
- The problem is cyclic
- Number of cyclic SCCs: 2
- Number of cyclic SCCs of size 1: 0
Selected Planning Algorithm: progression searchParsing heuristics ...
Number of specified heuristics: 1
- Calculating minimal implied costs and distances (0 ms)
Heuristic #0 = hhRC2(lmc;distance;correct count)
Search config:
 - type: path cost
 - weight: 2
 - suboptimal: false
Visited List configured
- mode: parallel sequences order
- hashs to use: state task task-sequence
- memory information: topological ordering
- Visited list allows deletion of search nodes: true
Search Configuration
- Using JAIR 2020 progression algorithm
- Search is stopped after first solution is found.
- Utilizing heuristics.
- Greedy A* Search with weight 2
- Distance G is "modification depth"
- Starting state heuristic value: 29
Search Results
- Search time 0.08 seconds
- Visited list time 0.000975 seconds
- Visited list inserts 246
- Visited list pruned 23
- Visited list contains 223
- Visited list hash collisions 23
- Visited list used hash buckets 223
- Generated 1070 search nodes
  Calculated heuristic for 867 nodes
  One modifications 178
  Effectless actions 25
- including 178 one modification actions
- including 0 one modification methods
- and       25 progressions of effectless actions
- Generated 10837 nodes per second
- Final fringe contains 319 nodes
- Status: Solved
- Found solution of length 45
- Total costs of actions: 18
==>
361 drive[truck-1,city-loc-1,city-loc-1]
369 drive[truck-1,city-loc-1,city-loc-3]
372 pick-up[truck-1,city-loc-3,package-2,capacity-1,capacity-2]
375 drive[truck-1,city-loc-3,city-loc-2]
825 drop[truck-1,city-loc-2,package-2,capacity-1,capacity-2]
963 drive[truck-1,city-loc-2,city-loc-1]
967 pick-up[truck-1,city-loc-1,package-3,capacity-1,capacity-2]
972 pick-up[truck-1,city-loc-1,package-1,capacity-0,capacity-1]
977 drive[truck-1,city-loc-1,city-loc-2]
1035 drop[truck-1,city-loc-2,package-1,capacity-0,capacity-1]
1036 drive[truck-1,city-loc-2,city-loc-3]
1037 noop[truck-1,city-loc-3]
1041 drop[truck-1,city-loc-3,package-3,capacity-1,capacity-2]
1042 pick-up[truck-1,city-loc-3,package-0,capacity-1,capacity-2]
1057 drive[truck-1,city-loc-3,city-loc-1]
1058 drive[truck-1,city-loc-1,city-loc-4]
1059 drive[truck-1,city-loc-4,city-loc-0]
1068 drop[truck-1,city-loc-0,package-0,capacity-1,capacity-2]
root 0
1067 unload[truck-1,city-loc-0,package-0] -> m-unload 1068
1056 get-to[truck-1,city-loc-1] -> m-drive-to 1057
1052 get-to[truck-1,city-loc-4] -> m-drive-to-via 1056 1058
1048 get-to[truck-1,city-loc-0] -> m-drive-to-via 1052 1059
1040 unload[truck-1,city-loc-3,package-3] -> m-unload 1041
1038 load[truck-1,city-loc-3,package-0] -> m-load 1042
984 unload[truck-1,city-loc-2,package-1] -> m-unload 1035
976 get-to[truck-1,city-loc-2] -> m-drive-to 977
971 get-to[truck-1,city-loc-3] -> m-i-am-there 1037
966 load[truck-1,city-loc-1,package-1] -> m-load 972
410 unload[truck-1,city-loc-2,package-2] -> m-unload 825
374 get-to[truck-1,city-loc-2] -> m-drive-to 375
371 load[truck-1,city-loc-3,package-2] -> m-load 372
363 load[truck-1,city-loc-1,package-3] -> m-load 967
350 get-to[truck-1,city-loc-3] -> m-drive-to 369
324 m-deliver_splitted_1[truck-1,package-2] -> _splitting_method_m-deliver_splitted_1 350 371
306 get-to[truck-1,city-loc-1] -> m-drive-to 361
302 m-deliver_splitted_1[truck-1,package-3] -> _splitting_method_m-deliver_splitted_1 306 363
296 get-to[truck-1,city-loc-3] -> m-drive-to 1036
23 get-to[truck-1,city-loc-1] -> m-drive-to 963
21 deliver[package-2,city-loc-2] -> m-deliver 324 374 410
20 deliver[package-3,city-loc-3] -> m-deliver 302 971 1040
18 m-deliver_splitted_1[truck-1,package-0] -> _splitting_method_m-deliver_splitted_1 296 1038
10 deliver[package-0,city-loc-0] -> m-deliver 18 1048 1067
8 m-deliver_splitted_1[truck-1,package-1] -> _splitting_method_m-deliver_splitted_1 23 966
1 deliver[package-1,city-loc-2] -> m-deliver 8 976 984
0 __top[] -> __top_method 10 1 21 20
<==
